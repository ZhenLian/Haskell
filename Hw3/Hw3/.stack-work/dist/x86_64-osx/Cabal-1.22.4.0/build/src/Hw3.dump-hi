
==================== FINAL INTERFACE ====================
2016-12-06 09:33:44.512143 UTC

interface Hw3_1q3tQIHY6iXAZtXZUroIGA:Hw3 [family instance module] 7102
  interface hash: b2327e9c59d56cb0442eed5c1cb46813
  ABI hash: 5012f4c517a9320a15a798f4515c38c7
  export-list hash: 46380dbddcf2e420266a78232cac75e5
  orphan hash: 1908a3bfbe34cc09930fd083d585ecbc
  flag hash: 4c970c699b8fd621b73d5c8abc0609ff
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hw3.adder
  Hw3.and2
  Hw3.arbitraryListOfSize
  Hw3.balInsert
  Hw3.balbst
  Hw3.bitAdder
  Hw3.bitSubtractor
  Hw3.bstDelete
  Hw3.bstInsert
  Hw3.bstRotBal
  Hw3.bstRotL
  Hw3.bstRotR
  Hw3.bsthd
  Hw3.delay
  Hw3.demux
  Hw3.demuxN
  Hw3.evalE
  Hw3.evalOp
  Hw3.evalS
  Hw3.execute
  Hw3.findLMax
  Hw3.fulladd
  Hw3.genBSTadd
  Hw3.genBSTdel
  Hw3.genBSTop
  Hw3.genBal
  Hw3.genBal'
  Hw3.halfSub
  Hw3.halfadd
  Hw3.height
  Hw3.high
  Hw3.imp2
  Hw3.isBSO
  Hw3.isBal
  Hw3.keys
  Hw3.leftMaybe
  Hw3.lift0
  Hw3.lift1
  Hw3.lift2
  Hw3.lift22
  Hw3.lift3
  Hw3.low
  Hw3.mapOfBSTops
  Hw3.mksequence
  Hw3.multiplier
  Hw3.mux
  Hw3.muxN
  Hw3.myEmail
  Hw3.myName
  Hw3.mySID
  Hw3.not2
  Hw3.ofBSTops
  Hw3.or2
  Hw3.probe
  Hw3.prop_Adder_Correct
  Hw3.prop_Multiplier_Correct
  Hw3.prop_bitAdder_Correct
  Hw3.prop_bitSubtractor_Correct
  Hw3.prop_delete_bal
  Hw3.prop_delete_bso
  Hw3.prop_delete_map
  Hw3.prop_genBal
  Hw3.prop_halfadd_commut
  Hw3.prop_insert_bal
  Hw3.prop_insert_bso
  Hw3.prop_insert_map
  Hw3.quickCheckN
  Hw3.runEval
  Hw3.sample1
  Hw3.sampleAt
  Hw3.sampleAtN
  Hw3.sampleN
  Hw3.simulate
  Hw3.str
  Hw3.test1
  Hw3.test1a
  Hw3.test2
  Hw3.test3
  Hw3.test4
  Hw3.test5
  Hw3.test6
  Hw3.test7
  Hw3.testprog1
  Hw3.testprog2
  Hw3.toBinds
  Hw3.trace
  Hw3.truncateSig
  Hw3.truncatedSignalSize
  Hw3.xor2
  Hw3.Agreeable{Hw3.===}
  Hw3.BST{Hw3.Bind Hw3.Emp}
  Hw3.BSTop{Hw3.BSTadd Hw3.BSTdel}
  Hw3.Binary{Hw3.binary}
  Hw3.Bop{Hw3.Divide Hw3.Ge Hw3.Gt Hw3.Le Hw3.Lt Hw3.Minus Hw3.Plus Hw3.Times}
  Hw3.Eval
  Hw3.Expression{Hw3.Op Hw3.Val Hw3.Var}
  Hw3.Signal{Hw3.Sig}
  Hw3.Statement{Hw3.Assign Hw3.If Hw3.Print Hw3.Sequence Hw3.Skip Hw3.Throw Hw3.Try Hw3.While}
  Hw3.Store
  Hw3.Value{Hw3.BoolVal Hw3.IntVal}
  Hw3.Variable
module dependencies:
package dependencies: QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP template-haskell-2.10.0.0
                      tf-random-0.5@tfran_28prfR75qTK8HkPsc02Mdm
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck 56c452ad8c9684c4a3ff945aba05abd7
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck.Arbitrary cbc3ddf558325be23038b40e3437ac4c
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck.Gen a3803ddb3b568f59430a464a7d00cd68
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck.Property be492d9ccc44ac00879c14615096adb6
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck.Test c1f1220cc3611d71311ee8ea7fac09a9
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.List 2a4f5f92892d432e7113f64cd9dcca53
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Generics 5ed2bc6fa96276d0ee34a25b06dd3344
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 29a6f3d7c8ad8a4e6200d8bbb6e70aae
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 5e4cbf1ca2e6c8cfaecf2b4e95371357
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base 7ea108dc1481cad0b32efe810e49ad43
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type bf9b4d13b1dbe96a83786d2e47d2e8ca
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Error 8327acac66bb5b22be9626230b652204
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Error.Class 7ae12d035506561dd4383e069bc67fa6
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State d96af44e8d2501342f4d849385ed921c
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State.Class a485e6dd398a6ce0122b254d3bf18f13
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Writer 4c07f2e27c3db06ca729c97935561a7d
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Writer.Class 940d9f09768a60118dfe355b5856c39f
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error 3ea1d80d4424bc422ec343e2ec1c6185
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.State.Lazy c08c12a521658e8ac939bca69680ffbc
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Writer.Lazy 07876a3e09e102d53cc2c7e01e7adaac
c0b78f657dc29cb277a5e455d70e8c4d
  $cbinary :: GHC.Types.Bool -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ b :: GHC.Types.Bool ->
                 case b of wild {
                   GHC.Types.False -> Hw3.$cbinary2
                   GHC.Types.True -> Hw3.$cbinary1 }) -}
8f23ed240b5331854e6b68c39115d207
  $cbinary1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
5927bde44f8d9962fde3818a6d3a586d
  $cbinary2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
a46ecc01815ae7c754e9f61445864df5
  $cbinary3 :: [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta :: [GHC.Types.Bool] -> Hw3.$cbinary_go eta) -}
928cf9a6a09d27a824d9da0b30e38cf8
  $cbinary_go :: [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
1c5ae4230239defa38f0d4c2f5c33674
  $dAgreeable_go :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5d5d58bd9efb92d94995173bf072691e
  $fAgreeable(,) ::
    (Hw3.Agreeable a, Hw3.Agreeable b) => Hw3.Agreeable (a, b)
  DFunId[0]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(C1(U))><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Hw3.$fAgreeable(,)_$c===
                  `cast`
                (forall a63 b.
                 <Hw3.Agreeable a63>_R
                 ->_R <Hw3.Agreeable b>_R
                 ->_R Sym (Hw3.NTCo:Agreeable[0] <(a63, b)>_N)) -}
5d5d58bd9efb92d94995173bf072691e
  $fAgreeable(,)_$c=== ::
    (Hw3.Agreeable a, Hw3.Agreeable b) =>
    (a, b) -> (a, b) -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(C1(U))><S,1*U(U,U)><S,1*U(U,U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a63
                   @ b
                   $dAgreeable2 :: Hw3.Agreeable a63
                   $dAgreeable3 :: Hw3.Agreeable b
                   ds :: (a63, b)
                   ds1 :: (a63, b) ->
                 case ds of wild { (,) a64 b1 ->
                 case ds1 of wild1 { (,) a65 b2 ->
                 case $dAgreeable2 `cast` (Hw3.NTCo:Agreeable[0] <a63>_N)
                        a64
                        a65 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> $dAgreeable3 `cast` (Hw3.NTCo:Agreeable[0] <b>_N)
                        b1
                        b2 } } }) -}
5d5d58bd9efb92d94995173bf072691e
  $fAgreeableSignal :: Hw3.Agreeable Hw3.Signal
  DFunId[0]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Hw3.$fAgreeableSignal_$c===
                  `cast`
                (Sym (Hw3.NTCo:Agreeable[0] <Hw3.Signal>_N)) -}
5df9ebaea1b8ef46a5c0c5d0cfdd5d08
  $fAgreeableSignal1 :: Hw3.Signal -> Hw3.Signal -> Data.Monoid.All
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ ds :: Hw3.Signal ds1 :: Hw3.Signal ->
                 Hw3.$dAgreeable_go
                   (Hw3.$wgo
                      ds `cast` (Hw3.NTCo:Signal[0])
                      20
                      (GHC.List.$wunsafeTake
                         @ GHC.Types.Bool
                         20
                         ds1 `cast` (Hw3.NTCo:Signal[0])))) -}
8630da86d32a66901f7fc8c173167cfd
  $fAgreeableSignal_$c=== ::
    Hw3.Signal -> Hw3.Signal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: (Hw3.$fAgreeableSignal1
                   `cast`
                 (<Hw3.Signal>_R
                  ->_R <Hw3.Signal>_R
                  ->_R Data.Monoid.NTCo:All[0])) -}
5d5d58bd9efb92d94995173bf072691e
  $fAgreeable[] :: Hw3.Agreeable a => Hw3.Agreeable [a]
  DFunId[0]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Hw3.$fAgreeable[]_$c===
                  `cast`
                (forall a63.
                 <Hw3.Agreeable a63>_R
                 ->_R Sym (Hw3.NTCo:Agreeable[0] <[a63]>_N)) -}
5d5d58bd9efb92d94995173bf072691e
  $fAgreeable[]1 :: Hw3.Agreeable a => [a] -> [a] -> Data.Monoid.All
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U><L,1*U>,
     Unfolding: (\ @ a63
                   $dAgreeable2 :: Hw3.Agreeable a63
                   as :: [a63]
                   bs :: [a63] ->
                 Hw3.$fAgreeable[]_go
                   (GHC.List.zipWith
                      @ a63
                      @ a63
                      @ GHC.Types.Bool
                      $dAgreeable2 `cast` (Hw3.NTCo:Agreeable[0] <a63>_N)
                      as
                      bs)) -}
5d5d58bd9efb92d94995173bf072691e
  $fAgreeable[]_$c=== ::
    Hw3.Agreeable a => [a] -> [a] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U><L,1*U>,
     Unfolding: (Hw3.$fAgreeable[]1
                   `cast`
                 (forall a63.
                  <Hw3.Agreeable a63>_R
                  ->_R <[a63]>_R
                  ->_R <[a63]>_R
                  ->_R Data.Monoid.NTCo:All[0])) -}
f6f0b1b8490c3d204552bf4bb7a5f147
  $fAgreeable[]_go :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7e55ef5e32f9b86954289d39276241e3
  $fArbitrarySignal :: Test.QuickCheck.Arbitrary.Arbitrary Hw3.Signal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Signal
                  Hw3.$fArbitrarySignal_$carbitrary
                  Hw3.$fArbitrarySignal_$s$dmshrink -}
7e55ef5e32f9b86954289d39276241e3
  $fArbitrarySignal1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Hw3.Signal
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Test.QuickCheck.Random.QCGen w1 :: GHC.Types.Int ->
                 case Hw3.$wa1 w of ww { (#,#) ww1 ww2 ->
                 (GHC.Types.: @ GHC.Types.Bool ww1 ww2)
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
7e55ef5e32f9b86954289d39276241e3
  $fArbitrarySignal_$carbitrary :: Test.QuickCheck.Gen.Gen Hw3.Signal
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,A>m2,
     Unfolding: InlineRule (0, True, True)
                Hw3.$fArbitrarySignal1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <Hw3.Signal>_R)) -}
7e55ef5e32f9b86954289d39276241e3
  $fArbitrarySignal_$s$dmshrink :: Hw3.Signal -> [Hw3.Signal]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Hw3.Signal -> GHC.Types.[] @ Hw3.Signal) -}
af451d1fd7cece4b1ee0c07ed157b698
  $fBinaryBool :: Hw3.Binary GHC.Types.Bool
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Hw3.$cbinary
                  `cast`
                (Sym (Hw3.NTCo:Binary[0] <GHC.Types.Bool>_N)) -}
af451d1fd7cece4b1ee0c07ed157b698
  $fBinary[] :: Hw3.Binary [GHC.Types.Bool]
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Hw3.$cbinary3
                  `cast`
                (Sym (Hw3.NTCo:Binary[0] <[GHC.Types.Bool]>_N)) -}
d02f882a25d9f16ad8cfd281acc4d975
  $fConstructorValue :: GHC.Generics.Constructor Hw3.C1_0Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.C1_0Value
                  Hw3.$fConstructorValue_$cconName
                  Hw3.$fConstructorValue_$s$dmconFixity
                  Hw3.$fConstructorValue_$s$dmconIsRecord -}
5fcc8096b038ddc791b4f4166aee7ba3
  $fConstructorValue0 :: GHC.Generics.Constructor Hw3.C1_1Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.C1_1Value
                  Hw3.$fConstructorValue0_$cconName
                  Hw3.$fConstructorValue0_$s$dmconFixity
                  Hw3.$fConstructorValue0_$s$dmconIsRecord -}
5fcc8096b038ddc791b4f4166aee7ba3
  $fConstructorValue0_$cconName ::
    t Hw3.C1_1Value f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.C1_1Value f a63 ->
                 Hw3.$fConstructorValue2) -}
5fcc8096b038ddc791b4f4166aee7ba3
  $fConstructorValue0_$s$dmconFixity ::
    t Hw3.C1_1Value f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.C1_1Value f a63 ->
                 GHC.Generics.Prefix) -}
5fcc8096b038ddc791b4f4166aee7ba3
  $fConstructorValue0_$s$dmconIsRecord ::
    t Hw3.C1_1Value f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.C1_1Value f a63 ->
                 GHC.Types.False) -}
4a9b4ba059f9dc62966d99fc0ab9ace5
  $fConstructorValue1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IntVal"#) -}
68e65ac41d06405a526ecd41427351f4
  $fConstructorValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolVal"#) -}
d02f882a25d9f16ad8cfd281acc4d975
  $fConstructorValue_$cconName ::
    t Hw3.C1_0Value f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.C1_0Value f a63 ->
                 Hw3.$fConstructorValue1) -}
d02f882a25d9f16ad8cfd281acc4d975
  $fConstructorValue_$s$dmconFixity ::
    t Hw3.C1_0Value f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.C1_0Value f a63 ->
                 GHC.Generics.Prefix) -}
d02f882a25d9f16ad8cfd281acc4d975
  $fConstructorValue_$s$dmconIsRecord ::
    t Hw3.C1_0Value f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.C1_0Value f a63 ->
                 GHC.Types.False) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fDatatypeValue :: GHC.Generics.Datatype Hw3.D1Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.D1Value
                  Hw3.$fDatatypeValue_$cdatatypeName
                  Hw3.$fDatatypeValue_$cmoduleName
                  Hw3.$fDatatypeValue_$s$dmisNewtype -}
b811c8253adc64c0dde065b9e3441cf8
  $fDatatypeValue1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hw3"#) -}
05f9994908cdaf30d62bdac5d4a3ddf7
  $fDatatypeValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Value"#) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fDatatypeValue_$cdatatypeName ::
    t Hw3.D1Value f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.D1Value f a63 ->
                 Hw3.$fDatatypeValue2) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fDatatypeValue_$cmoduleName ::
    t Hw3.D1Value f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.D1Value f a63 ->
                 Hw3.$fDatatypeValue1) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fDatatypeValue_$s$dmisNewtype ::
    t Hw3.D1Value f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a63
                   ds :: t Hw3.D1Value f a63 ->
                 GHC.Types.False) -}
c1bcc4faf53911877756cfed67557606
  $fEqBSTop ::
    (GHC.Classes.Eq k, GHC.Classes.Eq v) =>
    GHC.Classes.Eq (Hw3.BSTop k v)
  DFunId[0]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ k
                      @ v
                      $dEq :: GHC.Classes.Eq k
                      $dEq1 :: GHC.Classes.Eq v.
                  @ (Hw3.BSTop k v)
                  (Hw3.$fEqBSTop_$c== @ k @ v $dEq $dEq1)
                  (Hw3.$fEqBSTop_$c/= @ k @ v $dEq $dEq1) -}
c1bcc4faf53911877756cfed67557606
  $fEqBSTop_$c/= ::
    (GHC.Classes.Eq k, GHC.Classes.Eq v) =>
    Hw3.BSTop k v -> Hw3.BSTop k v -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ v
                   $dEq :: GHC.Classes.Eq k
                   $dEq1 :: GHC.Classes.Eq v
                   a63 :: Hw3.BSTop k v
                   b :: Hw3.BSTop k v ->
                 case Hw3.$fEqBSTop_$c== @ k @ v $dEq $dEq1 a63 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c1bcc4faf53911877756cfed67557606
  $fEqBSTop_$c== ::
    (GHC.Classes.Eq k, GHC.Classes.Eq v) =>
    Hw3.BSTop k v -> Hw3.BSTop k v -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ k
                   @ v
                   $dEq :: GHC.Classes.Eq k
                   $dEq1 :: GHC.Classes.Eq v
                   ds :: Hw3.BSTop k v
                   ds1 :: Hw3.BSTop k v ->
                 case ds of wild {
                   Hw3.BSTadd a63 a64
                   -> case ds1 of wild1 {
                        Hw3.BSTadd b1 b2
                        -> case GHC.Classes.== @ k $dEq a63 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ v $dEq1 a64 b2 }
                        Hw3.BSTdel ipv -> GHC.Types.False }
                   Hw3.BSTdel a63
                   -> case ds1 of wild1 {
                        Hw3.BSTadd ipv ipv1 -> GHC.Types.False
                        Hw3.BSTdel b1 -> GHC.Classes.== @ k $dEq a63 b1 } }) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fErrorValue :: Control.Monad.Trans.Error.Error Hw3.Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Value Hw3.$fErrorValue_$cnoMsg Hw3.$fErrorValue_$cstrMsg -}
2824f8ed49fc7a6152788b554a4c6d50
  $fErrorValue_$cnoMsg :: Hw3.Value
  {- Strictness: b -}
2824f8ed49fc7a6152788b554a4c6d50
  $fErrorValue_$cstrMsg :: GHC.Base.String -> Hw3.Value
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Base.String -> Hw3.$fErrorValue_$cnoMsg) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fGenericValue :: GHC.Generics.Generic Hw3.Value
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Value Hw3.$fGenericValue_$cfrom Hw3.$fGenericValue_$cto -}
2824f8ed49fc7a6152788b554a4c6d50
  $fGenericValue_$cfrom :: Hw3.Value -> GHC.Generics.Rep Hw3.Value x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: Hw3.Value ->
                 case ds of wild {
                   Hw3.IntVal g1
                   -> (GHC.Generics.L1
                         @ (GHC.Generics.M1
                              GHC.Generics.C
                              Hw3.C1_0Value
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 GHC.Generics.NoSelector
                                 (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)))
                         @ (GHC.Generics.C1
                              Hw3.C1_1Value
                              (GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 GHC.Types.Bool)))
                         @ x
                         g1
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.NTCo:K1[0]
                                        <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                              (Trans
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.S>_P
                                             <GHC.Generics.NoSelector>_P
                                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R))
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.C>_P
                                             <Hw3.C1_0Value>_P
                                             <GHC.Generics.M1
                                                GHC.Generics.S
                                                GHC.Generics.NoSelector
                                                (GHC.Generics.K1
                                                   GHC.Generics.R GHC.Types.Int)>_R)) <x>_N)))
                        `cast`
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <Hw3.D1Value>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        Hw3.C1_0Value
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           GHC.Generics.NoSelector
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                                      GHC.Generics.:+: GHC.Generics.C1
                                                         Hw3.C1_1Value
                                                         (GHC.Generics.S1
                                                            GHC.Generics.NoSelector
                                                            (GHC.Generics.Rec0 GHC.Types.Bool))>_R))
                           (Sub (Sym (Hw3.Rep_Value[0]))) <x>_N)
                   Hw3.BoolVal g1
                   -> (GHC.Generics.R1
                         @ (GHC.Generics.C1
                              Hw3.C1_0Value
                              (GHC.Generics.S1
                                 GHC.Generics.NoSelector (GHC.Generics.Rec0 GHC.Types.Int)))
                         @ (GHC.Generics.M1
                              GHC.Generics.C
                              Hw3.C1_1Value
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 GHC.Generics.NoSelector
                                 (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
                         @ x
                         g1
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.NTCo:K1[0]
                                        <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                              (Trans
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.S>_P
                                             <GHC.Generics.NoSelector>_P
                                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R))
                                   (Sym (GHC.Generics.NTCo:M1[0]
                                             <GHC.Generics.C>_P
                                             <Hw3.C1_1Value>_P
                                             <GHC.Generics.M1
                                                GHC.Generics.S
                                                GHC.Generics.NoSelector
                                                (GHC.Generics.K1
                                                   GHC.Generics.R GHC.Types.Bool)>_R)) <x>_N)))
                        `cast`
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <Hw3.D1Value>_P
                                     <GHC.Generics.C1
                                        Hw3.C1_0Value
                                        (GHC.Generics.S1
                                           GHC.Generics.NoSelector
                                           (GHC.Generics.Rec0 GHC.Types.Int))
                                      GHC.Generics.:+: GHC.Generics.M1
                                                         GHC.Generics.C
                                                         Hw3.C1_1Value
                                                         (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            GHC.Generics.NoSelector
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Bool))>_R))
                           (Sub (Sym (Hw3.Rep_Value[0]))) <x>_N) }) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fGenericValue_$cto :: GHC.Generics.Rep Hw3.Value x -> Hw3.Value
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GHC.Generics.Rep Hw3.Value x ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Hw3.Rep_Value[0]))
                           (GHC.Generics.NTCo:M1[0]
                                <GHC.Generics.D>_P
                                <Hw3.D1Value>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   Hw3.C1_0Value
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      GHC.Generics.NoSelector
                                      (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                                 GHC.Generics.:+: GHC.Generics.C1
                                                    Hw3.C1_1Value
                                                    (GHC.Generics.S1
                                                       GHC.Generics.NoSelector
                                                       (GHC.Generics.Rec0
                                                          GHC.Types.Bool))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> Hw3.IntVal
                        ds1
                          `cast`
                        (Trans
                             (Trans
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.C>_P
                                       <Hw3.C1_0Value>_P
                                       <GHC.Generics.M1
                                          GHC.Generics.S
                                          GHC.Generics.NoSelector
                                          (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)>_R)
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.S>_P
                                       <GHC.Generics.NoSelector>_P
                                       <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N)
                             (GHC.Generics.NTCo:K1[0]
                                  <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   GHC.Generics.R1 ds1
                   -> Hw3.BoolVal
                        ds1
                          `cast`
                        (Trans
                             (Trans
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.C>_P
                                       <Hw3.C1_1Value>_P
                                       <GHC.Generics.M1
                                          GHC.Generics.S
                                          GHC.Generics.NoSelector
                                          (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)>_R)
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.S>_P
                                       <GHC.Generics.NoSelector>_P
                                       <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R) <x>_N)
                             (GHC.Generics.NTCo:K1[0]
                                  <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P)) }) -}
5ec0623107d3a60ab54126ef6e2def04
  $fShowBST ::
    (GHC.Show.Show k, GHC.Show.Show v) => GHC.Show.Show (Hw3.BST k v)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ k
                      @ v
                      $dShow :: GHC.Show.Show k
                      $dShow1 :: GHC.Show.Show v.
                  @ (Hw3.BST k v)
                  (Hw3.$fShowBST_$cshowsPrec @ k @ v $dShow $dShow1)
                  (Hw3.$fShowBST_$cshow @ k @ v $dShow $dShow1)
                  (Hw3.$fShowBST_$cshowList @ k @ v $dShow $dShow1) -}
72a54fe2cdb8d735d011a5fbc5d49892
  $fShowBST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
5ec0623107d3a60ab54126ef6e2def04
  $fShowBST_$cshow ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    Hw3.BST k v -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ v
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show v
                   x :: Hw3.BST k v ->
                 Hw3.$fShowBST_$cshowsPrec
                   @ k
                   @ v
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5ec0623107d3a60ab54126ef6e2def04
  $fShowBST_$cshowList ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    [Hw3.BST k v] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ v
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show v
                   eta :: [Hw3.BST k v]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw3.BST k v)
                   (Hw3.$fShowBST_$cshowsPrec @ k @ v $dShow $dShow1 Hw3.$fShowBST2)
                   eta
                   eta1) -}
5ec0623107d3a60ab54126ef6e2def04
  $fShowBST_$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    GHC.Types.Int -> Hw3.BST k v -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
5ec0623107d3a60ab54126ef6e2def04
  $fShowBST_$s$cshowsPrec ::
    GHC.Types.Int
    -> Hw3.BST GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
c1bcc4faf53911877756cfed67557606
  $fShowBSTop ::
    (GHC.Show.Show k, GHC.Show.Show v) => GHC.Show.Show (Hw3.BSTop k v)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ k
                      @ v
                      $dShow :: GHC.Show.Show k
                      $dShow1 :: GHC.Show.Show v.
                  @ (Hw3.BSTop k v)
                  (Hw3.$fShowBSTop_$cshowsPrec @ k @ v $dShow $dShow1)
                  (Hw3.$fShowBSTop_$cshow @ k @ v $dShow $dShow1)
                  (Hw3.$fShowBSTop_$cshowList @ k @ v $dShow $dShow1) -}
fe82dc5dfdfabd2ae10488f3a1ccca50
  $fShowBSTop2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BSTdel "#) -}
ffc11a66d8c36d9d5fbe8ac312f491c4
  $fShowBSTop3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BSTadd "#) -}
7972e4d2f86b12e5687c5e8cff1ca8c3
  $fShowBSTop4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
c1bcc4faf53911877756cfed67557606
  $fShowBSTop_$cshow ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    Hw3.BSTop k v -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ v
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show v
                   x :: Hw3.BSTop k v ->
                 Hw3.$fShowBSTop_$cshowsPrec
                   @ k
                   @ v
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c1bcc4faf53911877756cfed67557606
  $fShowBSTop_$cshowList ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    [Hw3.BSTop k v] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ v
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show v
                   eta :: [Hw3.BSTop k v]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw3.BSTop k v)
                   (Hw3.$fShowBSTop_$cshowsPrec @ k @ v $dShow $dShow1 Hw3.$fShowBST2)
                   eta
                   eta1) -}
c1bcc4faf53911877756cfed67557606
  $fShowBSTop_$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    GHC.Types.Int -> Hw3.BSTop k v -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ v
                   w :: GHC.Show.Show k
                   w1 :: GHC.Show.Show v
                   w2 :: GHC.Types.Int
                   w3 :: Hw3.BSTop k v ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Hw3.$w$cshowsPrec @ k @ v w w1 ww1 w3 }) -}
c1bcc4faf53911877756cfed67557606
  $fShowBSTop_$s$cshowsPrec ::
    GHC.Types.Int
    -> Hw3.BSTop GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Hw3.BSTop GHC.Types.Int GHC.Types.Char
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hw3.$w$s$cshowsPrec ww1 w1 w2 }) -}
e064979dfc382856a3b815f6e73d6433
  $fShowBSTop_$sshows ::
    Hw3.BSTop GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: InlineRule (0, True, False)
                (Hw3.$fShowBSTop_$s$cshowsPrec GHC.Show.shows18) -}
ab0d03c3db78ba068f7f8c3e928b23e1
  $fShowBop :: GHC.Show.Show Hw3.Bop
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Bop
                  Hw3.$fShowBop_$cshowsPrec
                  Hw3.$fShowBop_$cshow
                  Hw3.$fShowBop_$cshowList -}
746fa2541b5b6db08b0ef1192a9cb06d
  $fShowBop1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Le"#) -}
e649cd3b91f482254e663ea4eb11d301
  $fShowBop2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lt"#) -}
2227ed81efbca9b5d6d6d202eefe89cd
  $fShowBop3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ge"#) -}
114a0e0f9b9d69577d356a7b3ff00df1
  $fShowBop4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gt"#) -}
556c7c4aa710d3e523b10a2d41738438
  $fShowBop5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Divide"#) -}
0133685cde8bae82adc65999fadecf6b
  $fShowBop6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Times"#) -}
b505f5a8acf37f78363883fb392167c3
  $fShowBop7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Minus"#) -}
ae137029c14eefcf80cd74cbb34c1969
  $fShowBop8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Plus"#) -}
ab0d03c3db78ba068f7f8c3e928b23e1
  $fShowBop_$cshow :: Hw3.Bop -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw3.Bop ->
                 Hw3.$fShowBop_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ab0d03c3db78ba068f7f8c3e928b23e1
  $fShowBop_$cshowList :: [Hw3.Bop] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw3.Bop Hw3.$w$cshowsPrec1) -}
ab0d03c3db78ba068f7f8c3e928b23e1
  $fShowBop_$cshowsPrec :: GHC.Types.Int -> Hw3.Bop -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Hw3.Bop w2 :: GHC.Base.String ->
                 Hw3.$w$cshowsPrec1 w1 w2) -}
14246dbbeba95631fad3d241fe435f17
  $fShowExpression :: GHC.Show.Show Hw3.Expression
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Expression
                  Hw3.$fShowExpression_$cshowsPrec
                  Hw3.$fShowExpression_$cshow
                  Hw3.$fShowExpression_$cshowList -}
14246dbbeba95631fad3d241fe435f17
  $fShowExpression1 :: Hw3.Expression -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Hw3.Expression w1 :: GHC.Base.String ->
                 Hw3.$w$cshowsPrec2 0 w w1) -}
14246dbbeba95631fad3d241fe435f17
  $fShowExpression_$cshow :: Hw3.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw3.Expression ->
                 Hw3.$fShowExpression_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
14246dbbeba95631fad3d241fe435f17
  $fShowExpression_$cshowList :: [Hw3.Expression] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Hw3.Expression
                   Hw3.$fShowExpression1) -}
14246dbbeba95631fad3d241fe435f17
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Hw3.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw3.Expression w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hw3.$w$cshowsPrec2 ww1 w1 w2 }) -}
7e55ef5e32f9b86954289d39276241e3
  $fShowSignal :: GHC.Show.Show Hw3.Signal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Signal
                  Hw3.$fShowSignal_$s$dmshowsPrec
                  Hw3.$fShowSignal_$cshow
                  Hw3.$fShowSignal_$cshowList -}
7e55ef5e32f9b86954289d39276241e3
  $fShowSignal1 :: Hw3.Signal -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Hw3.Signal s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Hw3.$fShowSignal_$cshow x) s) -}
6ade77895eba382b15eb39f64ad6bedb
  $fShowSignal2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "..."#) -}
7e55ef5e32f9b86954289d39276241e3
  $fShowSignal_$cshow :: Hw3.Signal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Hw3.Signal ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Show.$fShowBool_$cshowList
                      (GHC.List.$wunsafeTake
                         @ GHC.Types.Bool
                         20
                         ds `cast` (Hw3.NTCo:Signal[0]))
                      (GHC.Types.[] @ GHC.Types.Char))
                   Hw3.$fShowSignal2) -}
7e55ef5e32f9b86954289d39276241e3
  $fShowSignal_$cshowList :: [Hw3.Signal] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Hw3.Signal] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Hw3.Signal Hw3.$fShowSignal1 ls s) -}
7e55ef5e32f9b86954289d39276241e3
  $fShowSignal_$s$dmshowsPrec ::
    GHC.Types.Int -> Hw3.Signal -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: GHC.Types.Int x :: Hw3.Signal s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Hw3.$fShowSignal_$cshow x))
                   s) -}
6830ae9cc54fb7bf0424d992c7dd04ee
  $fShowStatement :: GHC.Show.Show Hw3.Statement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Statement
                  Hw3.$fShowStatement_$cshowsPrec
                  Hw3.$fShowStatement_$cshow
                  Hw3.$fShowStatement_$cshowList -}
6830ae9cc54fb7bf0424d992c7dd04ee
  $fShowStatement1 :: Hw3.Statement -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Hw3.$fShowStatement_$cshowsPrec Hw3.$fShowBST2) -}
6830ae9cc54fb7bf0424d992c7dd04ee
  $fShowStatement_$cshow :: Hw3.Statement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw3.Statement ->
                 Hw3.$fShowStatement_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6830ae9cc54fb7bf0424d992c7dd04ee
  $fShowStatement_$cshowList :: [Hw3.Statement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Hw3.Statement
                   Hw3.$fShowStatement1) -}
6830ae9cc54fb7bf0424d992c7dd04ee
  $fShowStatement_$cshowsPrec ::
    GHC.Types.Int -> Hw3.Statement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
2824f8ed49fc7a6152788b554a4c6d50
  $fShowValue :: GHC.Show.Show Hw3.Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw3.Value
                  Hw3.$fShowValue_$cshowsPrec
                  Hw3.$fShowValue_$cshow
                  Hw3.$fShowValue_$cshowList -}
2824f8ed49fc7a6152788b554a4c6d50
  $fShowValue1 :: Hw3.Value -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Hw3.Value w1 :: GHC.Base.String ->
                 Hw3.$w$cshowsPrec3 0 w w1) -}
4686be1af5d6d2b602116eeb06993862
  $fShowValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolVal "#) -}
e58f87b880dc35128bf4f31b1f584e72
  $fShowValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IntVal "#) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fShowValue_$cshow :: Hw3.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw3.Value ->
                 Hw3.$fShowValue_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fShowValue_$cshowList :: [Hw3.Value] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw3.Value Hw3.$fShowValue1) -}
2824f8ed49fc7a6152788b554a4c6d50
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Hw3.Value -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw3.Value w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hw3.$w$cshowsPrec3 ww1 w1 w2 }) -}
d780ffbaa4c6f74b22e5ba40328d1243
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Char)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Char
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqChar)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Types.Int
                     @ GHC.Types.Char
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqChar) -}
d4f91bb52909c055ceac55de72dd5cf3
  $sfindWithDefault1 ::
    a -> Hw3.Variable -> Data.Map.Base.Map Hw3.Variable a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U><S,1*U> -}
8d0c8ed2212914cf3b9bbc3b93a372bf
  $sinsert_$sgo10 ::
    Hw3.Variable
    -> a1
    -> Data.Map.Base.Map Hw3.Variable a1
    -> Data.Map.Base.Map Hw3.Variable a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
c1bcc4faf53911877756cfed67557606
  $w$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    GHC.Prim.Int# -> Hw3.BSTop k v -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ k
                   @ v
                   w :: GHC.Show.Show k
                   w1 :: GHC.Show.Show v
                   ww :: GHC.Prim.Int#
                   w2 :: Hw3.BSTop k v ->
                 case w2 of wild {
                   Hw3.BSTadd b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ k w Hw3.$fShowBSTop4 b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ v w1 Hw3.$fShowBSTop4 b2
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Hw3.$fShowBSTop3
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Hw3.$fShowBSTop3
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))))) }
                   Hw3.BSTdel b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ k w Hw3.$fShowBSTop4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> \ x :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBSTop2 (g x)
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Hw3.$fShowBSTop2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) } }) -}
ab0d03c3db78ba068f7f8c3e928b23e1
  $w$cshowsPrec1 :: Hw3.Bop -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Hw3.Bop w1 :: GHC.Base.String ->
                 case w of wild {
                   Hw3.Plus -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop8 w1
                   Hw3.Minus -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop7 w1
                   Hw3.Times -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop6 w1
                   Hw3.Divide -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop5 w1
                   Hw3.Gt -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop4 w1
                   Hw3.Ge -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop3 w1
                   Hw3.Lt -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop2 w1
                   Hw3.Le -> GHC.Base.++ @ GHC.Types.Char Hw3.$fShowBop1 w1 }) -}
14246dbbeba95631fad3d241fe435f17
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Hw3.Expression -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0] -}
2824f8ed49fc7a6152788b554a4c6d50
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Hw3.Value -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Hw3.Value
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Hw3.IntVal b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Hw3.$fShowValue3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11 ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Hw3.$fShowValue3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows8
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Hw3.BoolVal b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Hw3.$fShowValue2
                            (case b1 of wild1 {
                               GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x
                               GHC.Types.True
                               -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows16 x })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) } }) -}
c1bcc4faf53911877756cfed67557606
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Hw3.BSTop GHC.Types.Int GHC.Types.Char
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Hw3.BSTop GHC.Types.Int GHC.Types.Char
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Hw3.BSTadd b1 b2
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Hw3.$fShowBSTop3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt
                                     11
                                     ww3
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (case b2 of ww1 { GHC.Types.C# ww5 ->
                                         GHC.Show.$w$cshowsPrec15
                                           ww5
                                           w1 })) of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Hw3.$fShowBSTop3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (case b2 of ww1 { GHC.Types.C# ww5 ->
                                            GHC.Show.$w$cshowsPrec15
                                              ww5
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows8
                                                 w1) })) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Hw3.BSTdel b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Hw3.$fShowBSTop2
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11 ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Hw3.$fShowBSTop2
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows8
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }) -}
9cf29d33b26caa6adb87e06c4be0eb39
  $w$sgo1 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
76e961d7a88bdc299111d9fb000e1c74
  $w$sgo10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
39f3c401a73e37e157925365d1cec0e2
  $wa1 ::
    Test.QuickCheck.Random.QCGen
    -> (# GHC.Types.Bool, [GHC.Types.Bool] #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,1*U,A,A)>, Inline: [0] -}
eaadc393c80219c2e126854db562ff3b
  $wa2 ::
    Hw3.Expression
    -> Hw3.Store
    -> (# (Data.Either.Either Hw3.Value Hw3.Value, GHC.Base.String),
          Hw3.Store #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
cab393e358f98ac6c733e66fef7a9c58
  $wa3 ::
    Hw3.Statement
    -> Hw3.Store
    -> (# (Data.Either.Either Hw3.Value (), GHC.Base.String),
          Hw3.Store #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
33183c089a1bbef91e0b6b90f0ebc2d9
  $wa4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (# GHC.Types.Int, GHC.Types.Char #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>, Inline: [0],
     Unfolding: (\ w :: Test.QuickCheck.Random.QCGen
                   w1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case w `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 (# Hw3.genBSTadd_ds
                      `cast`
                    (Test.QuickCheck.Gen.NTCo:Gen[0] <GHC.Types.Int>_R)
                      (case ds1 of wild { (,) g1 g2 ->
                       g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                      w1,
                    Hw3.genBSTadd_m2
                      `cast`
                    (Test.QuickCheck.Gen.NTCo:Gen[0] <GHC.Types.Char>_R)
                      (case ds1 of wild { (,) g1 g2 ->
                       case g2 of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } } })
                      w1 #)) -}
78e639fa1d7047cd826635a73579cc8f
  $wa5 ::
    GHC.Prim.Int#
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 4, Strictness: <S,1*U><S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0] -}
e1129d42253a58ee10c7ef583a8edc0d
  $wadder :: [Hw3.Signal] -> [Hw3.Signal] -> [Hw3.Signal]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: [Hw3.Signal] ww1 :: [Hw3.Signal] ->
                 case Hw3.$wadderAux
                        Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        ww
                        ww1 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Base.++
                   @ Hw3.Signal
                   ww3
                   (GHC.Types.: @ Hw3.Signal ww4 (GHC.Types.[] @ Hw3.Signal)) }) -}
40a80b65a1b487c3a95fe7719bd72557
  $wadderAux ::
    Hw3.Signal
    -> [Hw3.Signal] -> [Hw3.Signal] -> (# [Hw3.Signal], Hw3.Signal #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,1*U>,
     Inline: [0] -}
c72df6ba3d04c645145296dd140c14fd
  $wbitAdder ::
    Hw3.Signal -> [Hw3.Signal] -> (# [Hw3.Signal], Hw3.Signal #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
35f71a80a480a185bb0f343fd09bda76
  $wbitSubtractor ::
    Hw3.Signal -> [Hw3.Signal] -> (# [Hw3.Signal], Hw3.Signal #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
25de8051b2dbe5e10e3bd06bfb8eeec7
  $wbstRotBal ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Hw3.BST k v
    -> Data.Either.Either
         (Hw3.BST k v) (GHC.Types.Int, GHC.Types.Int, Hw3.BST k v)
  {- Arity: 6,
     Strictness: <L,U><L,1*U(U)><L,U(U)><L,1*U(U)><L,U(U)><S,1*U>,
     Inline: [0] -}
474ce9f25396d05b3a64b1da72c64ff7
  $wbsthd :: Hw3.BST k v -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ k @ v w :: Hw3.BST k v ->
                 case w of wild {
                   Hw3.Emp -> (# Hw3.$fShowBST2, Hw3.$fShowBST2 #)
                   Hw3.Bind k1 v1 l r
                   -> (# case Hw3.bsthd4 @ k @ v l of ww { DEFAULT ->
                         case Hw3.bsthd3 @ k @ v r of ww1 { DEFAULT ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=# ww ww1) of wild2 {
                           GHC.Types.False -> GHC.Types.I# (GHC.Prim.+# 1 ww)
                           GHC.Types.True -> GHC.Types.I# (GHC.Prim.+# 1 ww1) } } },
                         case Hw3.bsthd2 @ k @ v l of ww { DEFAULT ->
                         case Hw3.bsthd1 @ k @ v r of ww1 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww ww1) } } #) }) -}
a216c1dc5926d5cbabe503a0130b1b60
  $wdemuxN ::
    [Hw3.Signal] -> Hw3.Signal -> (# [Hw3.Signal], [Hw3.Signal] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [Hw3.Signal] ww1 :: Hw3.Signal ->
                 letrec {
                   $wgo2 :: [Hw3.Signal] -> (# [Hw3.Signal], [Hw3.Signal] #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ w :: [Hw3.Signal] ->
                     case w of wild {
                       [] -> (# GHC.Types.[] @ Hw3.Signal, GHC.Types.[] @ Hw3.Signal #)
                       : y ys
                       -> case Hw3.$wlift22 Hw3.demux1 y ww1 of ww2 { (#,#) ww3 ww4 ->
                          let {
                            ys1 :: ([Hw3.Signal], [Hw3.Signal])
                            = case $wgo2 ys of ww5 { (#,#) ww6 ww7 -> (ww6, ww7) }
                          } in
                          (# GHC.Types.:
                               @ Hw3.Signal
                               ww3
                               (case ys1 of wild1 { (,) as bs -> as }),
                             GHC.Types.:
                               @ Hw3.Signal
                               ww4
                               (case ys1 of wild1 { (,) as bs -> bs }) #) } }
                 } in
                 $wgo2 ww) -}
cbfba6937e952880df975c43208d1593
  $wfindLMax :: Hw3.BST k v -> (# k, v #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
3a042ce03bb230e604910cc26514ad7f
  $wfulladd ::
    Hw3.Signal
    -> Hw3.Signal -> Hw3.Signal -> (# Hw3.Signal, Hw3.Signal #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: Hw3.Signal
                   ww1 :: Hw3.Signal
                   ww2 :: Hw3.Signal ->
                 let {
                   a63 :: [GHC.Types.Bool]
                   = GHC.List.zipWith
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       Hw3.fulladd_f
                       ww1 `cast` (Hw3.NTCo:Signal[0])
                       ww2 `cast` (Hw3.NTCo:Signal[0])
                 } in
                 (# (GHC.List.zipWith
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       Hw3.fulladd_f
                       ww `cast` (Hw3.NTCo:Signal[0])
                       a63)
                      `cast`
                    (Sym (Hw3.NTCo:Signal[0])),
                    (GHC.List.zipWith
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       Hw3.fulladd_f
                       (GHC.List.zipWith
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          GHC.Classes.&&
                          ww1 `cast` (Hw3.NTCo:Signal[0])
                          ww2 `cast` (Hw3.NTCo:Signal[0]))
                       (GHC.List.zipWith
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          GHC.Classes.&&
                          ww `cast` (Hw3.NTCo:Signal[0])
                          a63))
                      `cast`
                    (Sym (Hw3.NTCo:Signal[0])) #)) -}
15eed4a5b7d0d09c9f72004dd5405a6c
  $wgo ::
    [GHC.Types.Bool]
    -> GHC.Prim.Int# -> [GHC.Types.Bool] -> [GHC.Types.Bool]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
74ef48a8077c138cbc2fe98e2e6dc589
  $wgo1 ::
    [(GHC.Base.String, Hw3.Signal)]
    -> (# [GHC.Base.String], [Hw3.Signal] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
6bdc3472d9fd0f2293f7846a731f536e
  $wlift22 ::
    (GHC.Types.Bool
     -> GHC.Types.Bool -> (GHC.Types.Bool, GHC.Types.Bool))
    -> Hw3.Signal -> Hw3.Signal -> (# Hw3.Signal, Hw3.Signal #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Bool
                        -> GHC.Types.Bool -> (GHC.Types.Bool, GHC.Types.Bool)
                   ww :: Hw3.Signal
                   ww1 :: Hw3.Signal ->
                 let {
                   ds :: ([GHC.Types.Bool], [GHC.Types.Bool])
                   = letrec {
                       $wgo2 :: [GHC.Types.Bool]
                                -> [GHC.Types.Bool] -> (# [GHC.Types.Bool], [GHC.Types.Bool] #)
                         {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                       = \ w1 :: [GHC.Types.Bool] w2 :: [GHC.Types.Bool] ->
                         case w1 of wild {
                           []
                           -> (# GHC.Types.[] @ GHC.Types.Bool,
                                 GHC.Types.[] @ GHC.Types.Bool #)
                           : ipv ipv1
                           -> case w2 of wild1 {
                                []
                                -> (# GHC.Types.[] @ GHC.Types.Bool,
                                      GHC.Types.[] @ GHC.Types.Bool #)
                                : ipv2 ipv3
                                -> case w ipv ipv2 of wild2 { (,) a63 b1 ->
                                   let {
                                     r :: ([GHC.Types.Bool], [GHC.Types.Bool])
                                     = case $wgo2 ipv1 ipv3 of ww2 { (#,#) ww3 ww4 -> (ww3, ww4) }
                                   } in
                                   (# GHC.Types.:
                                        @ GHC.Types.Bool
                                        a63
                                        (case r of wild3 { (,) as bs -> as }),
                                      GHC.Types.:
                                        @ GHC.Types.Bool
                                        b1
                                        (case r of wild3 { (,) as bs -> bs }) #) } } }
                     } in
                     case $wgo2
                            ww `cast` (Hw3.NTCo:Signal[0])
                            ww1 `cast` (Hw3.NTCo:Signal[0]) of ww2 { (#,#) ww3 ww4 ->
                     (ww3, ww4) }
                 } in
                 (# case ds of wild { (,) zs1 zs2 ->
                    zs1 `cast` (Sym (Hw3.NTCo:Signal[0])) },
                    case ds of wild { (,) zs1 zs2 ->
                    zs2 `cast` (Sym (Hw3.NTCo:Signal[0])) } #)) -}
f8a5bf0a4d1b6b533cd76eea53d232dd
  $wmultiplier :: [Hw3.Signal] -> [Hw3.Signal] -> [Hw3.Signal]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: [0] -}
de830852e70e486eb23aad0fc89f2606
  $wmuxN ::
    [Hw3.Signal] -> [Hw3.Signal] -> Hw3.Signal -> [Hw3.Signal]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: [Hw3.Signal]
                   ww1 :: [Hw3.Signal]
                   ww2 :: Hw3.Signal ->
                 letrec {
                   go :: [Hw3.Signal] -> [Hw3.Signal] -> [Hw3.Signal]
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ ds :: [Hw3.Signal] _ys :: [Hw3.Signal] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Hw3.Signal
                       : ipv ipv1
                       -> case _ys of wild1 {
                            [] -> GHC.Types.[] @ Hw3.Signal
                            : ipv2 ipv3
                            -> GHC.Types.:
                                 @ Hw3.Signal
                                 (GHC.List.zipWith3
                                    @ GHC.Types.Bool
                                    @ GHC.Types.Bool
                                    @ GHC.Types.Bool
                                    @ GHC.Types.Bool
                                    Hw3.mux1
                                    ipv `cast` (Hw3.NTCo:Signal[0])
                                    ipv2 `cast` (Hw3.NTCo:Signal[0])
                                    ww2 `cast` (Hw3.NTCo:Signal[0]))
                                   `cast`
                                 (Sym (Hw3.NTCo:Signal[0]))
                                 (go ipv1 ipv3) } }
                 } in
                 go ww ww1) -}
5d5d58bd9efb92d94995173bf072691e
  class Agreeable a where
    (===) :: a -> a -> GHC.Types.Bool
5ec0623107d3a60ab54126ef6e2def04
  data BST k v = Emp | Bind k v (Hw3.BST k v) (Hw3.BST k v)
    Promotable
c1bcc4faf53911877756cfed67557606
  data BSTop k v = BSTadd k v | BSTdel k
    Promotable
af451d1fd7cece4b1ee0c07ed157b698
  class Binary a where
    binary :: a -> GHC.Integer.Type.Integer
ab0d03c3db78ba068f7f8c3e928b23e1
  data Bop = Plus | Minus | Times | Divide | Gt | Ge | Lt | Le
    Promotable
d02f882a25d9f16ad8cfd281acc4d975
  abstract(True) C1_0Value
5fcc8096b038ddc791b4f4166aee7ba3
  abstract(True) C1_1Value
2824f8ed49fc7a6152788b554a4c6d50
  abstract(True) D1Value
6fd552ac93a4c1fd4ea36c2ecf5c50f9
  type Eval a =
    Control.Monad.Trans.Error.ErrorT
      Hw3.Value
      (Control.Monad.Trans.Writer.Lazy.WriterT
         GHC.Base.String (Control.Monad.Trans.State.Lazy.State Hw3.Store))
      a
14246dbbeba95631fad3d241fe435f17
  data Expression
    = Var Hw3.Variable
    | Val Hw3.Value
    | Op Hw3.Bop Hw3.Expression Hw3.Expression
2824f8ed49fc7a6152788b554a4c6d50
  axiom Rep_Value::
      GHC.Generics.Rep Hw3.Value
        = GHC.Generics.D1
            Hw3.D1Value
            (GHC.Generics.C1
               Hw3.C1_0Value
               (GHC.Generics.S1
                  GHC.Generics.NoSelector (GHC.Generics.Rec0 GHC.Types.Int))
             GHC.Generics.:+: GHC.Generics.C1
                                Hw3.C1_1Value
                                (GHC.Generics.S1
                                   GHC.Generics.NoSelector (GHC.Generics.Rec0 GHC.Types.Bool)))
f10274ee1cfbffba5935d64fa1c47f29
  abstract(True) S1_0_0Value
022eb9a5c795bd868da83a06d1c344a1
  abstract(True) S1_1_0Value
7e55ef5e32f9b86954289d39276241e3
  newtype Signal = Sig [GHC.Types.Bool]
    Promotable
6830ae9cc54fb7bf0424d992c7dd04ee
  data Statement
    = Assign Hw3.Variable Hw3.Expression
    | If Hw3.Expression Hw3.Statement Hw3.Statement
    | While Hw3.Expression Hw3.Statement
    | Sequence Hw3.Statement Hw3.Statement
    | Skip
    | Print GHC.Base.String Hw3.Expression
    | Throw Hw3.Expression
    | Try Hw3.Statement Hw3.Variable Hw3.Statement
755f0704349ee479d500c112e09036aa
  type Store = Data.Map.Base.Map Hw3.Variable Hw3.Value
2824f8ed49fc7a6152788b554a4c6d50
  data Value = IntVal GHC.Types.Int | BoolVal GHC.Types.Bool
15710bf12facfc53b52ae9d97eb837f1
  type Variable = GHC.Base.String
99bf2bdf5d53d1c6f321baac44c3607b
  adder :: ([Hw3.Signal], [Hw3.Signal]) -> [Hw3.Signal]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Hw3.Signal], [Hw3.Signal]) ->
                 case w of ww { (,) ww1 ww2 -> Hw3.$wadder ww1 ww2 }) -}
b002e87d622ba47939f57ce69a576546
  adder_xs :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2 -}
c42e6bd33644e9d0c636e516df36a226
  and2 :: (Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,) ds1 ds2 ->
                 (GHC.Base.build
                    @ GHC.Types.Bool
                    (\ @ b1
                       c1 :: GHC.Types.Bool -> b1 -> b1[OneShot]
                       n :: b1[OneShot] ->
                     GHC.List.foldr2
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ b1
                       (GHC.List.zipWithFB
                          @ GHC.Types.Bool
                          @ b1
                          @ b1
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          c1
                          GHC.Classes.&&)
                       n
                       ds1 `cast` (Hw3.NTCo:Signal[0])
                       ds2 `cast` (Hw3.NTCo:Signal[0])))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
c3b6916df3005919fbfd7298a2cc927b
  arbitraryListOfSize ::
    (GHC.Enum.Enum a, GHC.Num.Num a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    a -> Test.QuickCheck.Gen.Gen [b]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(C1(U)),A)><L,1*U(A,A,A,A,A,A,1*C1(U))><L,1*U(1*U,A)><L,U>,
     Unfolding: (\ @ a63
                   @ b
                   $dEnum :: GHC.Enum.Enum a63
                   $dNum :: GHC.Num.Num a63
                   $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary b
                   n :: a63 ->
                 let {
                   lvl35 :: Test.QuickCheck.Gen.Gen b
                   = Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary
                 } in
                 letrec {
                   a64 :: [a63]
                          -> Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [b]
                     {- Arity: 3, Strictness: <S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U> -}
                   = \ ds :: [a63]
                       eta :: Test.QuickCheck.Random.QCGen
                       eta1 :: GHC.Types.Int ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ b
                       : y ys
                       -> let {
                            ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                            = case eta
                                     `cast`
                                   (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                              case System.Random.TF.Gen.$wtfGenSplit
                                     ww1
                                     ww2
                                     ww3
                                     ww4 of ww7 { (#,#) ww8 ww9 ->
                              (ww8, ww9) } }
                          } in
                          GHC.Types.:
                            @ b
                            (lvl35 `cast` (Test.QuickCheck.Gen.NTCo:Gen[0] <b>_R)
                               (case ds1 of wild1 { (,) g1 g2 ->
                                g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                               eta1)
                            (a64
                               ys
                               (case ds1 of wild1 { (,) g1 g2 ->
                                case g2 of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                                case System.Random.TF.Gen.$wtfGenSplit
                                       ww1
                                       ww2
                                       ww3
                                       ww4 of ww7 { (#,#) ww8 ww9 ->
                                ww8 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } } })
                               eta1) }
                 } in
                 (a64
                    (GHC.Enum.enumFromTo
                       @ a63
                       $dEnum
                       (GHC.Num.fromInteger @ a63 $dNum Hw3.$cbinary1)
                       n))
                   `cast`
                 (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <[b]>_R))) -}
a3cc54bc859bfa953a6f8a050d7eb34d
  balInsert ::
    GHC.Classes.Ord k =>
    k
    -> v
    -> Hw3.BST k v
    -> Data.Either.Either
         (Hw3.BST k v) (GHC.Types.Int, GHC.Types.Int, Hw3.BST k v)
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A)><L,U><L,U><S,1*U> -}
556fa9c692c0dd948997b7e006647172
  balInsert_$sbalInsert ::
    GHC.Types.Int
    -> v
    -> Hw3.BST GHC.Types.Int v
    -> Data.Either.Either
         (Hw3.BST GHC.Types.Int v)
         (GHC.Types.Int, GHC.Types.Int, Hw3.BST GHC.Types.Int v)
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,1*U> -}
7efcd8ec8032fbb2b603943724113e91
  balbst :: Hw3.BST k v -> Hw3.BST k v
  {- Arity: 1, Strictness: <S,1*U> -}
2ec26c2704b7555caf36af5b14c31846
  bitAdder ::
    (Hw3.Signal, [Hw3.Signal]) -> ([Hw3.Signal], Hw3.Signal)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (Hw3.Signal, [Hw3.Signal]) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Hw3.$wbitAdder ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
e1c84a5c587ff6166bfbed09be39250a
  bitSubtractor ::
    (Hw3.Signal, [Hw3.Signal]) -> ([Hw3.Signal], Hw3.Signal)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (Hw3.Signal, [Hw3.Signal]) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Hw3.$wbitSubtractor ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
6daba550506505dead3f4f65926bf6ff
  bstDelete :: GHC.Classes.Ord k => k -> Hw3.BST k v -> Hw3.BST k v
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C1(U)),A,C(C1(U)),A,A,A)><L,U><S,1*U> -}
5d596bd518a45bcf6c778af0580f7f32
  bstDelete_$sbstDelete ::
    GHC.Types.Int -> Hw3.BST GHC.Types.Int v -> Hw3.BST GHC.Types.Int v
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
06cf5db1d3179feaf017e45147b5211f
  bstInsert ::
    GHC.Classes.Ord k => k -> v -> Hw3.BST k v -> Hw3.BST k v
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A)><L,U><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ v
                   $dOrd :: GHC.Classes.Ord k
                   k1 :: k
                   v1 :: v
                   eta :: Hw3.BST k v ->
                 case Hw3.balInsert @ k @ v $dOrd k1 v1 eta of wild {
                   Data.Either.Left x -> x
                   Data.Either.Right y
                   -> case y of wild1 { (,,) k' v' bstI -> bstI } }) -}
86d1f4f6ef41ff121243f482f2edfd36
  bstRotBal ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Hw3.BST k v
    -> Data.Either.Either
         (Hw3.BST k v) (GHC.Types.Int, GHC.Types.Int, Hw3.BST k v)
  {- Arity: 6,
     Strictness: <S,1*U(U)><L,1*U(U)><L,U(U)><L,1*U(U)><L,U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ k
                   @ v
                   w :: GHC.Types.Int
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Types.Int
                   w5 :: Hw3.BST k v ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hw3.$wbstRotBal @ k @ v ww1 w1 w2 w3 w4 w5 }) -}
cd6bacdf8f8ef11c2abb3c60f868a7da
  bstRotL :: Hw3.BST k v -> Hw3.BST k v
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ k @ v ds :: Hw3.BST k v ->
                 case ds of wild {
                   Hw3.Emp -> Hw3.Emp @ k @ v
                   Hw3.Bind k1 v1 ds1 r
                   -> case ds1 of wild1 {
                        Hw3.Emp -> Hw3.bstRotL1 @ k @ v
                        Hw3.Bind lk lv ll lr
                        -> Hw3.Bind @ k @ v lk lv ll (Hw3.Bind @ k @ v k1 v1 lr r) } }) -}
cd3a61b24ce0b8fb3900a421744ea980
  bstRotL1 :: Hw3.BST k v
  {- Strictness: b -}
142e09f65ea54ae146a3ce8f0af9f0d6
  bstRotR :: Hw3.BST k v -> Hw3.BST k v
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ k @ v ds :: Hw3.BST k v ->
                 case ds of wild {
                   Hw3.Emp -> Hw3.Emp @ k @ v
                   Hw3.Bind k1 v1 l ds1
                   -> case ds1 of wild1 {
                        Hw3.Emp -> Hw3.bstRotR1 @ k @ v
                        Hw3.Bind rk rv rl rr
                        -> Hw3.Bind @ k @ v rk rv (Hw3.Bind @ k @ v k1 v1 l rl) rr } }) -}
381aeb314b05c30ca597a387b8ad98c1
  bstRotR1 :: Hw3.BST k v
  {- Strictness: b -}
5887c26f6c77f94df6c4d643bb324c2e
  bsthd :: Hw3.BST k v -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ k @ v w :: Hw3.BST k v ->
                 case Hw3.$wbsthd @ k @ v w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
a5f2ff8e2cc63a7b299f99bd10da12cf
  bsthd1 :: Hw3.BST k v -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
a3b3228c1ddd1f8ca18c92a188eb0fdf
  bsthd2 :: Hw3.BST k v -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
66a187ad1329d46dc7d39384e231845d
  bsthd3 :: Hw3.BST k v -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
0cc7d04ff551ab4f27e71c722993ead1
  bsthd4 :: Hw3.BST k v -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
bf21642ce4f78f2f529cb6fd91a0e3f1
  delay :: GHC.Types.Bool -> Hw3.Signal -> Hw3.Signal
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ GHC.Types.Bool)
                  `cast`
                (<GHC.Types.Bool>_R
                 ->_R Sym (Hw3.NTCo:Signal[0])
                 ->_R Sym (Hw3.NTCo:Signal[0])) -}
6152cb5c2d86b7af524853886b78edb6
  demux :: (Hw3.Signal, Hw3.Signal) -> (Hw3.Signal, Hw3.Signal)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ args :: (Hw3.Signal, Hw3.Signal) ->
                 Hw3.lift22 Hw3.demux1 args) -}
98c15a4a096b421102cf5c2ed9b644f6
  demux1 ::
    GHC.Types.Bool
    -> GHC.Types.Bool -> (GHC.Types.Bool, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ i :: GHC.Types.Bool select :: GHC.Types.Bool ->
                 case select of wild {
                   GHC.Types.False -> (GHC.Types.False, i)
                   GHC.Types.True -> (i, GHC.Types.False) }) -}
3497519e7b31da15be5486b593873994
  demuxN ::
    ([Hw3.Signal], Hw3.Signal) -> ([Hw3.Signal], [Hw3.Signal])
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Hw3.Signal], Hw3.Signal) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Hw3.$wdemuxN ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
dab127a464213c61ef5ceed049b4795c
  evalE ::
    Control.Monad.State.Class.MonadState Hw3.Store m =>
    Hw3.Expression -> m Hw3.Value
  {- Arity: 2, Strictness: <S(SLLL),U(U,U,A,A)><S,1*U> -}
824c556c21c460c1019c722814737c60
  evalOp :: Hw3.Bop -> Hw3.Value -> Hw3.Value -> Hw3.Value
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ ds :: Hw3.Bop ds1 :: Hw3.Value ds2 :: Hw3.Value ->
                 case ds of wild {
                   Hw3.Plus
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.IntVal (GHC.Num.$fNumInt_$c+ i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Minus
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.IntVal (GHC.Num.$fNumInt_$c- i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Times
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.IntVal (GHC.Num.$fNumInt_$c* i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Divide
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j
                             -> Hw3.IntVal
                                  (case j of wild3 { GHC.Types.I# x ->
                                   case x of wild4 {
                                     DEFAULT
                                     -> case i of ww { GHC.Types.I# ww1 ->
                                        case wild4 of wild5 {
                                          DEFAULT
                                          -> case GHC.Classes.divInt# ww1 wild5 of ww4 { DEFAULT ->
                                             GHC.Types.I# ww4 }
                                          (-1)
                                          -> case ww1 of wild6 {
                                               DEFAULT
                                               -> case GHC.Classes.divInt#
                                                         wild6
                                                         (-1) of ww4 { DEFAULT ->
                                                  GHC.Types.I# ww4 }
                                               (-9223372036854775808)
                                               -> case GHC.Real.overflowError
                                                  ret_ty GHC.Types.Int
                                                  of {} } } }
                                     0 -> Hw3.$fShowBST2 } })
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Gt
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.BoolVal (GHC.Classes.gtInt i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Ge
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.BoolVal (GHC.Classes.geInt i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Lt
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.BoolVal (GHC.Classes.ltInt i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 }
                   Hw3.Le
                   -> case ds1 of wild1 {
                        Hw3.IntVal i
                        -> case ds2 of wild2 {
                             Hw3.IntVal j -> Hw3.BoolVal (GHC.Classes.leInt i j)
                             Hw3.BoolVal ipv -> Hw3.evalOp1 }
                        Hw3.BoolVal ipv -> Hw3.evalOp1 } }) -}
3632b1e194247b9775d4670ad558d530
  evalOp1 :: Hw3.Value
  {- Strictness: b -}
fedaecfb2116778409ee55bed9be5ae3
  evalS ::
    (Control.Monad.State.Class.MonadState Hw3.Store m,
     Control.Monad.Error.Class.MonadError Hw3.Value m,
     Control.Monad.Writer.Class.MonadWriter GHC.Base.String m) =>
    Hw3.Statement -> m ()
  {- Arity: 4,
     Strictness: <L,U(U,U,C(U),A)><L,U(A,C(U),C(C1(U)))><L,U(A,U(U,U,U,U,U),A,C(U),A,A)><S,1*U> -}
ce953e22a12a3265ed57a64844e25e85
  execute ::
    Hw3.Store
    -> Hw3.Statement
    -> (Hw3.Store, GHC.Base.Maybe Hw3.Value, GHC.Base.String)
  {- Arity: 2, Strictness: <L,U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Hw3.Store w1 :: Hw3.Statement ->
                 let {
                   ds :: (Data.Either.Either Hw3.Value (), GHC.Base.String, Hw3.Store)
                   = case Hw3.$wa3 w1 w of ww { (#,#) ww1 ww2 ->
                     case ww1 of wild { (,) v l -> (v, l, ww2) } }
                 } in
                 (case ds of ds1 { (,,) v l sto' -> sto' },
                  case ds of ds1 { (,,) v l sto' ->
                  case v of wild {
                    Data.Either.Left v1 -> GHC.Base.Just @ Hw3.Value v1
                    Data.Either.Right ds2 -> GHC.Base.Nothing @ Hw3.Value } },
                  case ds of ds1 { (,,) v l sto' -> l })) -}
3a2dee9423617087a90a71d6205f6e7e
  findLMax :: Hw3.BST k v -> (k, v)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ k @ v w :: Hw3.BST k v ->
                 case Hw3.$wfindLMax @ k @ v w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
0386251418bfdb753358158d5616daa2
  fulladd ::
    (Hw3.Signal, Hw3.Signal, Hw3.Signal) -> (Hw3.Signal, Hw3.Signal)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (Hw3.Signal, Hw3.Signal, Hw3.Signal) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case Hw3.$wfulladd ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } }) -}
7c8990fa72e8c3b7537829041f677349
  fulladd_f :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Bool y :: GHC.Types.Bool ->
                 case x of wild {
                   GHC.Types.False -> y
                   GHC.Types.True
                   -> case y of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
dee4c9b326a2a30d48b3580b39614446
  genBSTadd ::
    Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>m1,
     Unfolding: InlineRule (0, True, True)
                Hw3.genBSTadd1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                          <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R)) -}
21c6eb23918ddc90993061470b7a8ab2
  genBSTadd1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Hw3.BSTop GHC.Types.Int GHC.Types.Char
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Test.QuickCheck.Random.QCGen w1 :: GHC.Types.Int ->
                 case Hw3.$wa4 w w1 of ww { (#,#) ww1 ww2 ->
                 Hw3.BSTadd @ GHC.Types.Int @ GHC.Types.Char ww1 ww2 }) -}
114056f4b4722a9d0ada8629c8401f68
  genBSTadd2 :: GHC.Base.String
  {- Unfolding: (GHC.Enum.eftChar 97 122) -}
e2b231ae714326034bd461f51e6b71d9
  genBSTadd_ds :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Int
                   Hw3.keys) -}
d059028ae4e0b0883a68f8c019ab423b
  genBSTadd_m2 :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Hw3.genBSTadd2) -}
e6a1229b6eb533357821cfffce2f012c
  genBSTdel ::
    Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Hw3.genBSTdel1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                          <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R)) -}
4bc06f0bc162e4463fe9cc407c66e045
  genBSTdel1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Hw3.BSTop GHC.Types.Int GHC.Types.Char
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ r :: Test.QuickCheck.Random.QCGen n :: GHC.Types.Int ->
                 Hw3.BSTdel
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   (Hw3.genBSTadd_ds
                      `cast`
                    (Test.QuickCheck.Gen.NTCo:Gen[0] <GHC.Types.Int>_R)
                      (case r `cast`
                            (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } })
                      n)) -}
32e0cb8ebe4fb382c4d2df303fa1d6ba
  genBSTop ::
    Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
  {- Unfolding: (Test.QuickCheck.Gen.frequency
                   @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                   Hw3.genBSTop1) -}
55df51d3515edb34f9cae1ead79c8c19
  genBSTop1 ::
    [(GHC.Types.Int,
      Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char))]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int,
                      Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char))
                   Hw3.genBSTop5
                   Hw3.genBSTop2) -}
88343fb45aed70244e88aef0605f764a
  genBSTop2 ::
    [(GHC.Types.Int,
      Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char))]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int,
                      Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char))
                   Hw3.genBSTop3
                   (GHC.Types.[]
                      @ (GHC.Types.Int,
                         Test.QuickCheck.Gen.Gen
                           (Hw3.BSTop GHC.Types.Int GHC.Types.Char)))) -}
ac8abf7c989444897fe9c954f449193c
  genBSTop3 ::
    (GHC.Types.Int,
     Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char))
  {- Unfolding: ((Hw3.genBSTop4,
                  Hw3.genBSTdel1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                            <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R)))) -}
ffa67249e9473ca9419bf4de453807f3
  genBSTop4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
8f52855072565b3675854fd367934a5d
  genBSTop5 ::
    (GHC.Types.Int,
     Test.QuickCheck.Gen.Gen (Hw3.BSTop GHC.Types.Int GHC.Types.Char))
  {- Unfolding: ((Hw3.genBSTop6,
                  Hw3.genBSTadd1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                            <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R)))) -}
ee463fe091ca3844c98d4b73d2c2d1ce
  genBSTop6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5) -}
e06aea3a26aff97b12222efd1500cfc2
  genBal ::
    Test.QuickCheck.Gen.Gen (Hw3.BST GHC.Types.Int GHC.Types.Char)
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Hw3.genBal1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                          <Hw3.BST GHC.Types.Int GHC.Types.Char>_R)) -}
c8902dae6efb46eb6c2cd7422b1bcff3
  genBal' ::
    GHC.Types.Int
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
    -> Test.QuickCheck.Gen.Gen (Hw3.BST GHC.Types.Int GHC.Types.Char)
  {- Arity: 4,
     Strictness: <S(S),1*U(1*U)><S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.genBal'1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Hw3.BST GHC.Types.Int GHC.Types.Char>_R
                 ->_R Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Hw3.BST GHC.Types.Int GHC.Types.Char>_R)) -}
b05d4b8e2e869148daba029170c0bd31
  genBal'1 ::
    GHC.Types.Int
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 4,
     Strictness: <S(S),1*U(1*U)><S,1*U><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Hw3.BST GHC.Types.Int GHC.Types.Char
                   w2 :: Test.QuickCheck.Random.QCGen
                   w3 :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> Hw3.$wa5 ww1 w1 w2 w3 }) -}
3123395aa01d4aaa7c8d7dadb2ad10d7
  genBal1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 2,
     Unfolding: (\ w :: Test.QuickCheck.Random.QCGen
                   w1 :: GHC.Types.Int ->
                 Hw3.$wa5 1000 Hw3.genBal2 w w1) -}
b7e6628270be3215639713d9c79de643
  genBal2 :: Hw3.BST GHC.Types.Int GHC.Types.Char
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw3.Bind
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   Hw3.genBal4
                   Hw3.genBal3
                   (Hw3.Emp @ GHC.Types.Int @ GHC.Types.Char)
                   (Hw3.Emp @ GHC.Types.Int @ GHC.Types.Char)) -}
d7c783b95e78a6deeb36b1d925ee361a
  genBal3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'M') -}
8c9003e2ad2b10a75e11ee893bf75463
  genBal4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 500) -}
91fe9f4a40545bd194f67f9da8efee07
  halfSub :: (Hw3.Signal, Hw3.Signal) -> (Hw3.Signal, Hw3.Signal)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (Hw3.Signal, Hw3.Signal) ->
                 case w of ww { (,) ww1 ww2 ->
                 ((GHC.List.zipWith
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     Hw3.fulladd_f
                     ww1 `cast` (Hw3.NTCo:Signal[0])
                     ww2 `cast` (Hw3.NTCo:Signal[0]))
                    `cast`
                  (Sym (Hw3.NTCo:Signal[0])),
                  (Hw3.halfSub_go
                     ww1 `cast` (Hw3.NTCo:Signal[0])
                     ww2 `cast` (Hw3.NTCo:Signal[0]))
                    `cast`
                  (Sym (Hw3.NTCo:Signal[0]))) }) -}
792450e5ce5bde624173e573181f3eca
  halfSub_go ::
    [GHC.Types.Bool] -> [GHC.Types.Bool] -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
10886c62e677a7625856e8f6e4411485
  halfadd :: (Hw3.Signal, Hw3.Signal) -> (Hw3.Signal, Hw3.Signal)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (Hw3.Signal, Hw3.Signal) ->
                 case w of ww { (,) ww1 ww2 ->
                 ((GHC.List.zipWith
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     Hw3.fulladd_f
                     ww1 `cast` (Hw3.NTCo:Signal[0])
                     ww2 `cast` (Hw3.NTCo:Signal[0]))
                    `cast`
                  (Sym (Hw3.NTCo:Signal[0])),
                  (GHC.List.zipWith
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     @ GHC.Types.Bool
                     GHC.Classes.&&
                     ww1 `cast` (Hw3.NTCo:Signal[0])
                     ww2 `cast` (Hw3.NTCo:Signal[0]))
                    `cast`
                  (Sym (Hw3.NTCo:Signal[0]))) }) -}
91751ee27f7a62c3c6b860751b01aded
  height :: (GHC.Num.Num a, GHC.Classes.Ord a) => Hw3.BST t t1 -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(C(C1(U)),A,A,A,A,A,C(U))><L,U(A,A,A,A,A,A,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ t
                   @ t1
                   @ a63
                   $dNum :: GHC.Num.Num a63
                   $dOrd :: GHC.Classes.Ord a63
                   eta :: Hw3.BST t t1 ->
                 let {
                   lvl35 :: a63 = GHC.Num.fromInteger @ a63 $dNum Hw3.$cbinary2
                 } in
                 let {
                   lvl36 :: a63 = GHC.Num.fromInteger @ a63 $dNum Hw3.$cbinary1
                 } in
                 letrec {
                   height3 :: Hw3.BST t t1 -> a63 {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: Hw3.BST t t1 ->
                     case ds of wild {
                       Hw3.Emp -> lvl35
                       Hw3.Bind ds1 ds2 l r
                       -> GHC.Num.+
                            @ a63
                            $dNum
                            lvl36
                            (GHC.Classes.max @ a63 $dOrd (height3 l) (height3 r)) }
                 } in
                 height3 eta) -}
0be69af21232315355b1c1456216625a
  high :: Hw3.Signal
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])) -}
2e590f5fb55063e868ee486bdccfb081
  high_xs :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2 -}
2e3f0a3eb0889e9f83e2e9c52c28c56b
  imp2 :: (Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,) ds1 ds2 ->
                 (GHC.Base.build
                    @ GHC.Types.Bool
                    (\ @ b1
                       c1 :: GHC.Types.Bool -> b1 -> b1[OneShot]
                       n :: b1[OneShot] ->
                     GHC.List.foldr2
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ b1
                       (GHC.List.zipWithFB
                          @ GHC.Types.Bool
                          @ b1
                          @ b1
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          c1
                          Hw3.imp2_f)
                       n
                       ds1 `cast` (Hw3.NTCo:Signal[0])
                       ds2 `cast` (Hw3.NTCo:Signal[0])))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
a72e612e8f72c99cc16f13badf582270
  imp2_f :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Bool y :: GHC.Types.Bool ->
                 case x of wild {
                   GHC.Types.False -> GHC.Types.True GHC.Types.True -> y }) -}
bd675f33490508db6b2d267a52944285
  isBSO :: GHC.Classes.Ord a => Hw3.BST a b -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(U),A,A,A,A,A)><S,1*U> -}
171adb97d68e394325af3e460e8717d0
  isBSO_$sisBSO :: Hw3.BST GHC.Types.Int b -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5b489da6b76685a783e82e8d0f83e02c
  isBal :: Hw3.BST t t1 -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
4e7ce30dbb5fb45b5d07ebf211d97759
  keys :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0 10) -}
6964f4930aa823a97b85f6519c782d8a
  leftMaybe :: Data.Either.Either a b -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a63 @ b ds :: Data.Either.Either a63 b ->
                 case ds of wild {
                   Data.Either.Left v -> GHC.Base.Just @ a63 v
                   Data.Either.Right ds1 -> GHC.Base.Nothing @ a63 }) -}
7506bc66abf7984d58ef2de609f43907
  lift0 :: GHC.Types.Bool -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.repeat @ GHC.Types.Bool)
                  `cast`
                (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0])) -}
89d7ec4f67ae777dee325536df42c8c1
  lift1 ::
    (GHC.Types.Bool -> GHC.Types.Bool) -> Hw3.Signal -> Hw3.Signal
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.map @ GHC.Types.Bool @ GHC.Types.Bool)
                  `cast`
                (<GHC.Types.Bool -> GHC.Types.Bool>_R
                 ->_R Sym (Hw3.NTCo:Signal[0])
                 ->_R Sym (Hw3.NTCo:Signal[0])) -}
670a371f89559409329da1c4ef7228d0
  lift2 ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> (Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(C1(U))><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: (Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,) ds1 ds2 ->
                 (GHC.Base.build
                    @ GHC.Types.Bool
                    (\ @ b1
                       c1 :: GHC.Types.Bool -> b1 -> b1[OneShot]
                       n :: b1[OneShot] ->
                     GHC.List.foldr2
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ b1
                       (GHC.List.zipWithFB
                          @ GHC.Types.Bool
                          @ b1
                          @ b1
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          c1
                          f)
                       n
                       ds1 `cast` (Hw3.NTCo:Signal[0])
                       ds2 `cast` (Hw3.NTCo:Signal[0])))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
d7906da065c87164f1efc6519ae90a55
  lift22 ::
    (GHC.Types.Bool
     -> GHC.Types.Bool -> (GHC.Types.Bool, GHC.Types.Bool))
    -> (Hw3.Signal, Hw3.Signal) -> (Hw3.Signal, Hw3.Signal)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(C1(U(U,U)))><S,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Bool
                        -> GHC.Types.Bool -> (GHC.Types.Bool, GHC.Types.Bool)
                   w1 :: (Hw3.Signal, Hw3.Signal) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case Hw3.$wlift22 w ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
75e6f36e8027d558613664435ad2dc15
  lift3 ::
    (GHC.Types.Bool
     -> GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> (Hw3.Signal, Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,C(C1(C1(U)))><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Bool
                        -> GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: (Hw3.Signal, Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,,) ds1 ds2 ds3 ->
                 (GHC.List.zipWith3
                    @ GHC.Types.Bool
                    @ GHC.Types.Bool
                    @ GHC.Types.Bool
                    @ GHC.Types.Bool
                    f
                    ds1 `cast` (Hw3.NTCo:Signal[0])
                    ds2 `cast` (Hw3.NTCo:Signal[0])
                    ds3 `cast` (Hw3.NTCo:Signal[0]))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
783da9afc7b18c1cb0100d5e731f911c
  low :: Hw3.Signal
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])) -}
9f1f66b8e47e4db6cf551dbde8db7af5
  mapOfBSTops ::
    GHC.Classes.Ord k => [Hw3.BSTop k a] -> Data.Map.Base.Map k a
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ k
                   @ a63
                   $dOrd :: GHC.Classes.Ord k
                   eta :: [Hw3.BSTop k a63] ->
                 letrec {
                   go :: [Hw3.BSTop k a63] -> Data.Map.Base.Map k a63
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Hw3.BSTop k a63] ->
                     case ds of wild {
                       [] -> Data.Map.Base.Tip @ k @ a63
                       : y ys
                       -> case y of wild1 {
                            Hw3.BSTadd k1 v
                            -> Data.Map.Base.insert @ k @ a63 $dOrd k1 v (go ys)
                            Hw3.BSTdel k1
                            -> Data.Map.Base.delete @ k @ a63 $dOrd k1 (go ys) } }
                 } in
                 go eta) -}
5e83801a5930581f7266707294a0c6ba
  mksequence ::
    Data.Foldable.Foldable t => t Hw3.Statement -> Hw3.Statement
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLLLLLLLLLLL),1*U(A,A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (t :: * -> *) $dFoldable :: Data.Foldable.Foldable t ->
                 Data.Foldable.foldr
                   @ t
                   $dFoldable
                   @ Hw3.Statement
                   @ Hw3.Statement
                   Hw3.Sequence
                   Hw3.Skip) -}
dcb45a89c935a554732f2b63ff5524ee
  multiplier :: ([Hw3.Signal], [Hw3.Signal]) -> [Hw3.Signal]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Hw3.Signal], [Hw3.Signal]) ->
                 case w of ww { (,) ww1 ww2 -> Hw3.$wmultiplier ww1 ww2 }) -}
28b9f452cf3ddef089333d0716cf2fa6
  mux :: (Hw3.Signal, Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (Hw3.Signal, Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,,) ds1 ds2 ds3 ->
                 (GHC.List.zipWith3
                    @ GHC.Types.Bool
                    @ GHC.Types.Bool
                    @ GHC.Types.Bool
                    @ GHC.Types.Bool
                    Hw3.mux1
                    ds1 `cast` (Hw3.NTCo:Signal[0])
                    ds2 `cast` (Hw3.NTCo:Signal[0])
                    ds3 `cast` (Hw3.NTCo:Signal[0]))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
ff44dc24de7c9bf99c3ba9248f35b509
  mux1 ::
    GHC.Types.Bool
    -> GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ b1 :: GHC.Types.Bool
                   b2 :: GHC.Types.Bool
                   select :: GHC.Types.Bool ->
                 case select of wild {
                   GHC.Types.False -> b2 GHC.Types.True -> b1 }) -}
3a361acfac2eda72ef9f38d48c5beddf
  muxN :: ([Hw3.Signal], [Hw3.Signal], Hw3.Signal) -> [Hw3.Signal]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Hw3.Signal], [Hw3.Signal], Hw3.Signal) ->
                 case w of ww { (,,) ww1 ww2 ww3 -> Hw3.$wmuxN ww1 ww2 ww3 }) -}
099c57c49dd1161b0fddc209ca87d60e
  myEmail :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "z3lian@eng.ucsd.edu"#) -}
7ca22c8894053a72ccc17b141d5174bc
  myName :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Zhen Lian"#) -}
9c9f7aed12b51651b78308669e84185b
  mySID :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A53215552(PID)"#) -}
c151771582dc14386e7cbffc6666f7a8
  not1 :: Hw3.Signal -> [GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Hw3.Signal ->
                 GHC.Base.build
                   @ GHC.Types.Bool
                   (\ @ b1
                      c :: GHC.Types.Bool -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Bool
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Bool
                         @ b1
                         @ GHC.Types.Bool
                         c
                         GHC.Classes.not)
                      n
                      ds `cast` (Hw3.NTCo:Signal[0]))) -}
31e648d2f7a97351f1158d78d6ce3e7b
  not2 :: Hw3.Signal -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.not1 `cast` (<Hw3.Signal>_R ->_R Sym (Hw3.NTCo:Signal[0])) -}
497efae17e54165faa2181aea13bb436
  ofBSTops :: GHC.Classes.Ord k => [Hw3.BSTop k v] -> Hw3.BST k v
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,C(C1(U)),A,A,A)><S,1*U>,
     Unfolding: (\ @ k
                   @ v
                   $dOrd :: GHC.Classes.Ord k
                   eta :: [Hw3.BSTop k v] ->
                 letrec {
                   go :: [Hw3.BSTop k v] -> Hw3.BST k v
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Hw3.BSTop k v] ->
                     case ds of wild {
                       [] -> Hw3.Emp @ k @ v
                       : y ys
                       -> case y of wild1 {
                            Hw3.BSTadd k1 v1
                            -> case Hw3.balInsert @ k @ v $dOrd k1 v1 (go ys) of wild2 {
                                 Data.Either.Left x -> x
                                 Data.Either.Right y1
                                 -> case y1 of wild3 { (,,) k' v' bstI -> bstI } }
                            Hw3.BSTdel k1 -> Hw3.bstDelete @ k @ v $dOrd k1 (go ys) } }
                 } in
                 go eta) -}
872a737a87ddcee6054aeb14c4092189
  or2 :: (Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,) ds1 ds2 ->
                 (GHC.Base.build
                    @ GHC.Types.Bool
                    (\ @ b1
                       c1 :: GHC.Types.Bool -> b1 -> b1[OneShot]
                       n :: b1[OneShot] ->
                     GHC.List.foldr2
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ b1
                       (GHC.List.zipWithFB
                          @ GHC.Types.Bool
                          @ b1
                          @ b1
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          c1
                          GHC.Classes.||)
                       n
                       ds1 `cast` (Hw3.NTCo:Signal[0])
                       ds2 `cast` (Hw3.NTCo:Signal[0])))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
d148e0f8419181034240462d8101dd66
  probe :: [(GHC.Base.String, Hw3.Signal)] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.probe1
                  `cast`
                (<[(GHC.Base.String, Hw3.Signal)]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
79ed9971e110999f80b11ea7ca42eab2
  probe1 ::
    [(GHC.Base.String, Hw3.Signal)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ desc :: [(GHC.Base.String, Hw3.Signal)]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Hw3.probe2 desc Hw3.genBSTop4 eta) -}
6970c0c14c0b87522710de1d814fcea5
  probe2 ::
    [(GHC.Base.String, Hw3.Signal)]
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><L,U>,
     Unfolding: (\ desc :: [(GHC.Base.String, Hw3.Signal)]
                   count :: GHC.Types.Int
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   ds :: ([GHC.Base.String], [Hw3.Signal])
                   = case Hw3.$wgo1 desc of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                 } in
                 let {
                   names :: [GHC.Base.String]
                   = case ds of wild { (,) names1 wires -> names1 }
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Data.OldList.intercalate @ GHC.Types.Char Hw3.probe6 names)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case count of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False -> (# ipv, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case ds of wild2 { (,) names1 wires ->
                      let {
                        a63 :: [GHC.Types.Bool]
                               -> GHC.Types.IO ()
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 3, Strictness: <L,1*U><L,1*C1(U(U,U))><L,U> -}
                        = \ x :: [GHC.Types.Bool]
                            eta1 :: GHC.Types.IO ()[OneShot]
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 (case GHC.List.zipWith
                                         @ [GHC.Types.Char]
                                         @ GHC.Types.Bool
                                         @ [GHC.Types.Char]
                                         Hw3.probe4
                                         names
                                         x of wild3 {
                                    [] -> GHC.Types.[] @ GHC.Types.Char
                                    : x1 xs1
                                    -> Data.OldList.intercalate_$spoly_go
                                         @ GHC.Types.Char
                                         x1
                                         (Data.OldList.prependToAll
                                            @ [GHC.Types.Char]
                                            Hw3.probe6
                                            xs1) })
                                 GHC.Types.True
                                 eta2 of ds2 { (#,#) ipv2 ipv3 ->
                          eta1 `cast` (GHC.Types.NTCo:IO[0] <()>_R) ipv2 }
                      } in
                      letrec {
                        $wa17 :: [[GHC.Types.Bool]]
                                 -> GHC.Prim.Int#
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 3, Strictness: <S,1*U><L,1*U><L,U>, Inline: [0] -}
                        = \ w :: [[GHC.Types.Bool]]
                            ww :: GHC.Prim.Int#
                            w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          case w of wild3 {
                            [] -> (# w1, GHC.Tuple.() #)
                            : y1 ys
                            -> case ww of ds2 {
                                 DEFAULT
                                 -> a63
                                      y1
                                      (\ w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                       $wa17 ys (GHC.Prim.-# ds2 1) w2)
                                        `cast`
                                      (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                      w1
                                 1
                                 -> a63
                                      y1
                                      Hw3.probe3 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                      w1 } }
                      } in
                      $wa17
                        (Data.OldList.transpose
                           @ GHC.Types.Bool
                           wires `cast` ([Hw3.NTCo:Signal[0]])_R)
                        y
                        ipv } } } }) -}
edfd6886338180a6679c885025b3f2ee
  probe3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
9f0c32eb835fc3aaf4deb81ca6707120
  probe4 :: [GHC.Types.Char] -> GHC.Types.Bool -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ n :: [GHC.Types.Char] b :: GHC.Types.Bool[OneShot] ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char n 0 of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1
                 } in
                 let {
                   n1 :: [GHC.Types.Char]
                   = case b of wild {
                       GHC.Types.False
                       -> case GHC.Show.$w$cshowsPrec1
                                 0
                                 Hw3.$cbinary2
                                 (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww3 ww4 ->
                          GHC.Types.: @ GHC.Types.Char ww3 ww4 }
                       GHC.Types.True
                       -> case GHC.Show.$w$cshowsPrec1
                                 0
                                 Hw3.$cbinary1
                                 (GHC.Types.[] @ GHC.Types.Char) of ww1 { (#,#) ww3 ww4 ->
                          GHC.Types.: @ GHC.Types.Char ww3 ww4 } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False -> n1
                   GHC.Types.True
                   -> let {
                        lvl35 :: [GHC.Types.Char]
                        = GHC.Types.: @ GHC.Types.Char Hw3.probe5 n1
                      } in
                      letrec {
                        $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                        = \ ww :: GHC.Prim.Int# ->
                          case ww of ds1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 Hw3.probe5
                                 ($wxs (GHC.Prim.-# ds1 1))
                            1 -> lvl35 }
                      } in
                      $wxs y } }) -}
4130959688d7c1b4a7479753e3cec705
  probe5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' ') -}
1d6d8429fce7495f0cd5cda0fc0a727e
  probe6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
7edb2f6497c3e1a661ef461d7e444b09
  prop_Adder_Correct ::
    [GHC.Types.Bool] -> [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ l1 :: [GHC.Types.Bool] l2 :: [GHC.Types.Bool] ->
                 case Hw3.$wadderAux
                        Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        (GHC.Base.map
                           @ GHC.Types.Bool
                           @ Hw3.Signal
                           (GHC.List.repeat @ GHC.Types.Bool)
                             `cast`
                           (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0]))
                           l1)
                        (GHC.Base.map
                           @ GHC.Types.Bool
                           @ Hw3.Signal
                           (GHC.List.repeat @ GHC.Types.Bool)
                             `cast`
                           (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0]))
                           l2) of ww { (#,#) ww1 ww2 ->
                 let {
                   z :: GHC.Integer.Type.Integer
                   = Hw3.prop_Adder_Correct1
                       (GHC.List.$w!! @ GHC.Types.Bool ww2 `cast` (Hw3.NTCo:Signal[0]) 0)
                       Hw3.$cbinary2
                 } in
                 letrec {
                   go :: [Hw3.Signal] -> GHC.Integer.Type.Integer
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Hw3.Signal] ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> Hw3.prop_Adder_Correct1
                            (GHC.List.$w!! @ GHC.Types.Bool y `cast` (Hw3.NTCo:Signal[0]) 0)
                            (go ys) }
                 } in
                 case GHC.Integer.Type.eqInteger#
                        (go ww1)
                        (GHC.Integer.Type.plusInteger
                           (Hw3.prop_Adder_Correct_go1 l1)
                           (Hw3.prop_Adder_Correct_go l2)) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild } }) -}
2624b7b797a7b842df5eeca8269a0656
  prop_Adder_Correct1 ::
    GHC.Types.Bool
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ x :: GHC.Types.Bool r :: GHC.Integer.Type.Integer ->
                 case x of wild {
                   GHC.Types.False
                   -> GHC.Integer.Type.plusInteger
                        Hw3.$cbinary2
                        (GHC.Integer.Type.timesInteger Hw3.prop_Adder_Correct2 r)
                   GHC.Types.True
                   -> GHC.Integer.Type.plusInteger
                        Hw3.$cbinary1
                        (GHC.Integer.Type.timesInteger Hw3.prop_Adder_Correct2 r) }) -}
ce347a27dafd56b6bdb32cb15897a8a3
  prop_Adder_Correct2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2) -}
8ea2cb724b74f321702b6e8bca529f94
  prop_Adder_Correct_go ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
9b0a1c8315bdc197755c7780fd89129c
  prop_Adder_Correct_go1 ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
262bc09dc095138b7883205fc5b25e94
  prop_Multiplier_Correct ::
    [GHC.Types.Bool] -> [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ as :: [GHC.Types.Bool] bs :: [GHC.Types.Bool] ->
                 case GHC.Integer.Type.eqInteger#
                        (Hw3.prop_Multiplier_Correct_go2
                           (Hw3.$wmultiplier
                              (GHC.Base.map
                                 @ GHC.Types.Bool
                                 @ Hw3.Signal
                                 (GHC.List.repeat @ GHC.Types.Bool)
                                   `cast`
                                 (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0]))
                                 as)
                              (GHC.Base.map
                                 @ GHC.Types.Bool
                                 @ Hw3.Signal
                                 (GHC.List.repeat @ GHC.Types.Bool)
                                   `cast`
                                 (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0]))
                                 bs)))
                        (GHC.Integer.Type.timesInteger
                           (Hw3.prop_Multiplier_Correct_go1 as)
                           (Hw3.prop_Multiplier_Correct_go bs)) of wild { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild }) -}
1adbc598ead068810d8237be93924f63
  prop_Multiplier_Correct_go ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
adb3105fe1ecca367ea9d7d07ae27d19
  prop_Multiplier_Correct_go1 ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
94e4251a58ad2a2750870a72ef397dc5
  prop_Multiplier_Correct_go2 ::
    [Hw3.Signal] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
c2a33e67e14cb567306caa5d771962fd
  prop_bitAdder_Correct ::
    Hw3.Signal -> [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ cin :: Hw3.Signal xs1 :: [GHC.Types.Bool] ->
                 case Hw3.$wbitAdder
                        cin
                        (GHC.Base.map
                           @ GHC.Types.Bool
                           @ Hw3.Signal
                           (GHC.List.repeat @ GHC.Types.Bool)
                             `cast`
                           (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0]))
                           xs1) of ww { (#,#) ww1 ww2 ->
                 let {
                   z :: GHC.Integer.Type.Integer
                   = Hw3.prop_Adder_Correct1
                       (GHC.List.$w!! @ GHC.Types.Bool ww2 `cast` (Hw3.NTCo:Signal[0]) 0)
                       Hw3.$cbinary2
                 } in
                 letrec {
                   go :: [Hw3.Signal] -> GHC.Integer.Type.Integer
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Hw3.Signal] ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> Hw3.prop_Adder_Correct1
                            (GHC.List.$w!! @ GHC.Types.Bool y `cast` (Hw3.NTCo:Signal[0]) 0)
                            (go ys) }
                 } in
                 case GHC.List.$w!!
                        @ GHC.Types.Bool
                        cin `cast` (Hw3.NTCo:Signal[0])
                        0 of wild {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             (go ww1)
                             (GHC.Integer.Type.plusInteger
                                (Hw3.prop_bitAdder_Correct_go1 xs1)
                                Hw3.$cbinary2) of wild1 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 }
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger#
                             (go ww1)
                             (GHC.Integer.Type.plusInteger
                                (Hw3.prop_bitAdder_Correct_go xs1)
                                Hw3.$cbinary1) of wild1 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 } } }) -}
95109e9cb4beeb51ed405b11cf975b3c
  prop_bitAdder_Correct_go ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
b9da42618e4ce55f97b5495d84d4b1f4
  prop_bitAdder_Correct_go1 ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
1ec7759373b21ecd05b6f1bbed00bfcc
  prop_bitSubtractor_Correct ::
    Hw3.Signal -> [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ cin :: Hw3.Signal xs1 :: [GHC.Types.Bool] ->
                 case Hw3.$wbitSubtractor
                        cin
                        (GHC.Base.map
                           @ GHC.Types.Bool
                           @ Hw3.Signal
                           (GHC.List.repeat @ GHC.Types.Bool)
                             `cast`
                           (<GHC.Types.Bool>_R ->_R Sym (Hw3.NTCo:Signal[0]))
                           xs1) of ww { (#,#) ww1 ww2 ->
                 let {
                   b2 :: GHC.Integer.Type.Integer
                   = case GHC.List.$w!!
                            @ GHC.Types.Bool
                            cin `cast` (Hw3.NTCo:Signal[0])
                            0 of wild {
                       GHC.Types.False -> Hw3.$cbinary2 GHC.Types.True -> Hw3.$cbinary1 }
                 } in
                 let {
                   b1 :: GHC.Integer.Type.Integer
                   = Hw3.prop_bitSubtractor_Correct_go2 xs1
                 } in
                 case GHC.Integer.Type.geInteger# b1 b2 of wild { DEFAULT ->
                 case GHC.List.$w!!
                        @ GHC.Types.Bool
                        ww2 `cast` (Hw3.NTCo:Signal[0])
                        0 of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild2 {
                        GHC.Types.False
                        -> case GHC.Integer.Type.eqInteger#
                                  (Hw3.prop_bitSubtractor_Correct_go1 ww1)
                                  Hw3.$cbinary2 of wild3 { DEFAULT ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 }
                        GHC.Types.True
                        -> case GHC.Integer.Type.eqInteger#
                                  (Hw3.prop_bitSubtractor_Correct_go1 ww1)
                                  (GHC.Integer.Type.minusInteger b1 b2) of wild3 { DEFAULT ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } }
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild2 {
                        GHC.Types.False
                        -> case GHC.Integer.Type.eqInteger#
                                  (Hw3.prop_bitSubtractor_Correct_go ww1)
                                  Hw3.$cbinary2 of wild3 { DEFAULT ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 }
                        GHC.Types.True
                        -> case GHC.Integer.Type.eqInteger#
                                  (Hw3.prop_bitSubtractor_Correct_go ww1)
                                  (GHC.Integer.Type.minusInteger b1 b2) of wild3 { DEFAULT ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 } } } } }) -}
287aa4c2df124644734ff8c27310dd29
  prop_bitSubtractor_Correct_go ::
    [Hw3.Signal] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
f8b1fb1af264a361cc49e9e0acf676b6
  prop_bitSubtractor_Correct_go1 ::
    [Hw3.Signal] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
312c8c316c194f7c04678e38a879bbc6
  prop_bitSubtractor_Correct_go2 ::
    [GHC.Types.Bool] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
bb26a0e42b7ff7afde1bc9ed40e8dcc1
  prop_delete_bal :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_delete_bal1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
ba58d306dc4ed2ac7ed97ecd8b8d6605
  prop_delete_bal1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
                   = Test.QuickCheck.Gen.listOf2
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.genBSTop
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (GHC.Show.showList__
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.$fShowBSTop_$sshows
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (Hw3.isBal
                       @ GHC.Types.Int
                       @ GHC.Types.Char
                       (Hw3.prop_delete_bal_go x)))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
fdbe22c5de14d853ea50f392e016e9f4
  prop_delete_bal_go ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
5fa4a762dbddbd4e95a51189e5f1e9ff
  prop_delete_bso :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_delete_bso1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
8c20b3621fa4f8356d47fc8119761c7f
  prop_delete_bso1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
                   = Test.QuickCheck.Gen.listOf2
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.genBSTop
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (GHC.Show.showList__
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.$fShowBSTop_$sshows
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (Hw3.isBSO_$sisBSO @ GHC.Types.Char (Hw3.prop_delete_bso_go x)))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
0ed2cd456b2cc3448ff6ad1216a0a487
  prop_delete_bso_go ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
1de6938406bcf3189f1e549ce735877f
  prop_delete_map :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_delete_map1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
8978eba1ca9db67ff4e791dad6fb3794
  prop_delete_map1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
                   = Test.QuickCheck.Gen.listOf2
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.genBSTop
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (GHC.Show.showList__
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.$fShowBSTop_$sshows
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (GHC.Classes.$fEq[]_$c==
                       @ (GHC.Types.Int, GHC.Types.Char)
                       Hw3.$s$fEq(,)
                       (Hw3.toBinds
                          @ GHC.Types.Int
                          @ GHC.Types.Char
                          (Hw3.prop_delete_map_go1 x))
                       (Data.Map.Base.$fEqMap1
                          @ GHC.Types.Int
                          @ GHC.Types.Char
                          (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Char))
                          (Hw3.prop_delete_map_go x))))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
2252cc561f564dc72fa7868fe93b69a8
  prop_delete_map_go ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Data.Map.Base.Map GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
7e04c000039574d20d787679eebf8e0b
  prop_delete_map_go1 ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
20959f6b56dc13eb982a4ed9487ceac9
  prop_genBal :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_genBal1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
63eae0fe377fbc3239a37ef0cbce3693
  prop_genBal1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: Hw3.BST GHC.Types.Int GHC.Types.Char
                   = Hw3.$wa5
                       1000
                       Hw3.genBal2
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (Hw3.$fShowBST_$s$cshowsPrec
                       GHC.Show.shows18
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (Hw3.isBal @ GHC.Types.Int @ GHC.Types.Char x))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
c09230f201ceffcf77e2c91f99122d9c
  prop_halfadd_commut ::
    GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: (\ b1 :: GHC.Types.Bool b2 :: GHC.Types.Bool ->
                 letrec {
                   xs1 :: [GHC.Types.Bool] = GHC.Types.: @ GHC.Types.Bool b1 xs1
                 } in
                 letrec {
                   xs2 :: [GHC.Types.Bool] = GHC.Types.: @ GHC.Types.Bool b2 xs2
                 } in
                 letrec {
                   xs3 :: [GHC.Types.Bool] = GHC.Types.: @ GHC.Types.Bool b2 xs3
                 } in
                 letrec {
                   xs4 :: [GHC.Types.Bool] = GHC.Types.: @ GHC.Types.Bool b1 xs4
                 } in
                 case (Hw3.$dAgreeable_go
                         (Hw3.$wgo
                            (GHC.List.zipWith
                               @ GHC.Types.Bool
                               @ GHC.Types.Bool
                               @ GHC.Types.Bool
                               Hw3.fulladd_f
                               xs1
                               xs2)
                            20
                            (GHC.List.$wunsafeTake
                               @ GHC.Types.Bool
                               20
                               (GHC.List.zipWith
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool
                                  Hw3.fulladd_f
                                  xs3
                                  xs4))))
                        `cast`
                      (Data.Monoid.NTCo:All[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> (Hw3.$dAgreeable_go
                         (Hw3.$wgo
                            (GHC.List.zipWith
                               @ GHC.Types.Bool
                               @ GHC.Types.Bool
                               @ GHC.Types.Bool
                               GHC.Classes.&&
                               xs1
                               xs2)
                            20
                            (GHC.List.$wunsafeTake
                               @ GHC.Types.Bool
                               20
                               (GHC.List.zipWith
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool
                                  GHC.Classes.&&
                                  xs3
                                  xs4))))
                        `cast`
                      (Data.Monoid.NTCo:All[0]) }) -}
e49ef130d918fc29d0c7f261f9c99248
  prop_insert_bal :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_insert_bal1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
337bf5859255b68518278697b5b479d4
  prop_insert_bal1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
                   = Test.QuickCheck.Gen.listOf2
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.genBSTadd1
                         `cast`
                       (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                 <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R))
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (GHC.Show.showList__
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.$fShowBSTop_$sshows
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (Hw3.isBal
                       @ GHC.Types.Int
                       @ GHC.Types.Char
                       (Hw3.prop_insert_bal_go x)))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
ca788eb676976c56080ad1635ea917ec
  prop_insert_bal_go ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
bbc8437a6176465c34356933fcb7a1f5
  prop_insert_bso :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_insert_bso1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
27849bf0ff36170e99133a3be073a998
  prop_insert_bso1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
                   = Test.QuickCheck.Gen.listOf2
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.genBSTadd1
                         `cast`
                       (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                 <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R))
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (GHC.Show.showList__
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.$fShowBSTop_$sshows
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (Hw3.isBSO_$sisBSO @ GHC.Types.Char (Hw3.prop_insert_bso_go x)))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
ca411055caef74435b5b32870f5ed03f
  prop_insert_bso_go ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
aec6c67ce9b164e738ee6ee4521eafd5
  prop_insert_map :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Hw3.prop_insert_map1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
88082ff3fd07679a0f9f9f96180ae394
  prop_insert_map1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
                   = Test.QuickCheck.Gen.listOf2
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.genBSTadd1
                         `cast`
                       (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                 <Hw3.BSTop GHC.Types.Int GHC.Types.Char>_R))
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (GHC.Show.showList__
                       @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char)
                       Hw3.$fShowBSTop_$sshows
                       x
                       (GHC.Types.[] @ GHC.Types.Char))
                    (GHC.Classes.$fEq[]_$c==
                       @ (GHC.Types.Int, GHC.Types.Char)
                       Hw3.$s$fEq(,)
                       (Hw3.toBinds
                          @ GHC.Types.Int
                          @ GHC.Types.Char
                          (Hw3.prop_insert_map_go1 x))
                       (Data.Map.Base.$fEqMap1
                          @ GHC.Types.Int
                          @ GHC.Types.Char
                          (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Char))
                          (Hw3.prop_insert_map_go x))))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
db162cb9392751629e7dc49c5e54b4a1
  prop_insert_map_go ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Data.Map.Base.Map GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
573e76b956557fde2c74170dbb7d001b
  prop_insert_map_go1 ::
    [Hw3.BSTop GHC.Types.Int GHC.Types.Char]
    -> Hw3.BST GHC.Types.Int GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U> -}
210cb0928785335afefd05f010e550c8
  quickCheckN ::
    Test.QuickCheck.Property.Testable prop =>
    GHC.Types.Int -> prop -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U(C(U),C(U))><L,U(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.quickCheckN1
                  `cast`
                (forall prop.
                 <Test.QuickCheck.Property.Testable prop>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <prop>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
88ad7e77eb69105738daa552b37f9aee
  quickCheckN1 ::
    Test.QuickCheck.Property.Testable prop =>
    GHC.Types.Int
    -> prop
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(C(U),C(U))><L,U(U)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ prop
                   $dTestable :: Test.QuickCheck.Property.Testable prop
                   n :: GHC.Types.Int
                   eta :: prop
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Test.QuickCheck.Test.$wa7
                        @ prop
                        $dTestable
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        n
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
d75346896a46be28654c040af05ff19a
  runEval ::
    Hw3.Eval a
    -> Hw3.Store
    -> ((Data.Either.Either Hw3.Value a, GHC.Base.String), Hw3.Store)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.runEval1
                  `cast`
                (forall a63.
                 <Hw3.Eval a63>_R
                 ->_R <Hw3.Store>_R
                 ->_R Data.Functor.Identity.NTCo:Identity[0]
                          <((Data.Either.Either Hw3.Value a63, GHC.Base.String),
                            Hw3.Store)>_R) -}
d8990aa3dc26aa9b956e6d99dfb0f35c
  runEval1 ::
    Hw3.Eval a
    -> Hw3.Store
    -> Data.Functor.Identity.Identity
         ((Data.Either.Either Hw3.Value a, GHC.Base.String), Hw3.Store)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U(U,U))><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a63 act :: Hw3.Eval a63 sto :: Hw3.Store ->
                 act
                   `cast`
                 (Trans
                      (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                           <Hw3.Value>_N
                           <Control.Monad.Trans.Writer.Lazy.WriterT
                              GHC.Base.String
                              (Control.Monad.Trans.State.Lazy.StateT
                                 Hw3.Store Data.Functor.Identity.Identity)>_R
                           <a63>_N)
                      (Trans
                           (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                <GHC.Base.String>_N
                                <Control.Monad.Trans.State.Lazy.StateT
                                   Hw3.Store Data.Functor.Identity.Identity>_R
                                <Data.Either.Either Hw3.Value a63>_N)
                           (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                <Hw3.Store>_N
                                <Data.Functor.Identity.Identity>_R
                                <(Data.Either.Either Hw3.Value a63, GHC.Base.String)>_N)))
                   sto) -}
8c5b292059bd0bb1b2c3a39b0b55c9c1
  sample1 :: Hw3.Signal -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Hw3.Signal ->
                 GHC.List.$w!! @ GHC.Types.Bool ds `cast` (Hw3.NTCo:Signal[0]) 0) -}
bb35d745eb1ddb897f76dcec1e0918fd
  sampleAt :: GHC.Types.Int -> Hw3.Signal -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ n :: GHC.Types.Int ds :: Hw3.Signal ->
                 GHC.List.!! @ GHC.Types.Bool ds `cast` (Hw3.NTCo:Signal[0]) n) -}
d9323e1595e1ee0df48b66d2e323879a
  sampleAtN :: GHC.Types.Int -> [Hw3.Signal] -> [GHC.Types.Bool]
  {- Arity: 2, Strictness: <L,U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ n :: GHC.Types.Int signals :: [Hw3.Signal] ->
                 GHC.Base.build
                   @ GHC.Types.Bool
                   (\ @ b1
                      c :: GHC.Types.Bool -> b1 -> b1[OneShot]
                      n1 :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ Hw3.Signal
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Bool
                         @ b1
                         @ Hw3.Signal
                         c
                         (\ ds :: Hw3.Signal ->
                          GHC.List.!! @ GHC.Types.Bool ds `cast` (Hw3.NTCo:Signal[0]) n))
                      n1
                      signals)) -}
419b167d28465fae7f329640cfd1507c
  sampleN :: [Hw3.Signal] -> [GHC.Types.Bool]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ signals :: [Hw3.Signal] ->
                 GHC.Base.build
                   @ GHC.Types.Bool
                   (\ @ b1
                      c :: GHC.Types.Bool -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ Hw3.Signal
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Bool
                         @ b1
                         @ Hw3.Signal
                         c
                         (\ ds :: Hw3.Signal ->
                          GHC.List.$w!! @ GHC.Types.Bool ds `cast` (Hw3.NTCo:Signal[0]) 0))
                      n
                      signals)) -}
c9e8851d40818140c350adedbd4f27f3
  simulate :: [(GHC.Base.String, Hw3.Signal)] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.simulate1
                  `cast`
                (<[(GHC.Base.String, Hw3.Signal)]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1311bf098f4ad9089645cb7c148f7f40
  simulate1 ::
    [(GHC.Base.String, Hw3.Signal)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ desc :: [(GHC.Base.String, Hw3.Signal)]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Hw3.probe2 desc Hw3.simulate2 eta) -}
cac194f9dc92faa56a41b3eb72fb89d1
  simulate2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20) -}
6295d5236b6286818824a9d077988fc5
  str :: GHC.Base.String -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.str1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Hw3.NTCo:Signal[0])) -}
5fceed3329dab075cb4fb6fe3c96fce2
  str1 :: GHC.Base.String -> [GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ cs :: GHC.Base.String -> Hw3.str_go cs) -}
6562d6884b7001d1dd90516ed37ab3ca
  str_go :: [GHC.Types.Char] -> [GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a0d4936cdb5febd182f940bc7ca311cd
  test1 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test11 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
36736da2dd77e37bf58e91d34c50c109
  test100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x2"#) -}
188b210b5b78fbc12177eee39c49fc01
  test101 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test102,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
7c587799ff8aff2fdf66363632b974e0
  test102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x1"#) -}
ab8cef298105a16e4b7dbf990c43b182
  test103 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test104 Hw3.genBSTop4) -}
9b4c1c881c0c8c51a10c7d58db7e158b
  test104 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test51
                   Hw3.test105) -}
f0d98c320b7a0948a9a1da771bf7e3ce
  test105 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test127
                   Hw3.test106) -}
478eb54b86d75e4bbc888c44c6f57130
  test106 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test47
                   Hw3.test107) -}
760b0282623e4de042d49e9e6bde1349
  test107 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test45
                   Hw3.test108) -}
130c13790e497f30aaf6b03433c7cc04
  test108 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test43
                   Hw3.test109) -}
20f691ab9fd1d1efb4e8aa0319f9cae9
  test109 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test125
                   Hw3.test110) -}
6a0b088fc4f516b23e650907ea866e25
  test11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test12 Hw3.genBSTop4) -}
45b978ab30c6535a6d8e853be0d8ec55
  test110 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test123
                   Hw3.test111) -}
bac5deadfd4dab00850e2d6eea238421
  test111 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test121
                   Hw3.test112) -}
bda25ccead475403c30e812bd7ead44b
  test112 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test119
                   Hw3.test113) -}
0eff81cd7ace8ca611aa83b394bc5d0a
  test113 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test114
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
2890e785266b13d731b21746fdcd9b64
  test114 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test30, Hw3.test115)) -}
a72c7532d9f2eeb10967b6c4823644bd
  test115 :: Hw3.Signal
  {- Unfolding: (case Hw3.test116 of ds { (,,,,) s1 s2 s3 s4 c ->
                 c }) -}
7a2b0245d4b8f07b49ff12a161bad049
  test116 ::
    (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wbitSubtractor
                        Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.test118 of ww { (#,#) ww1 ww2 ->
                 case ww1 of wild {
                   [] -> Hw3.test117 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test117 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> Hw3.test117 GHC.Prim.void#
                             : s3 ds2
                             -> case ds2 of wild3 {
                                  [] -> Hw3.test117 GHC.Prim.void#
                                  : s4 ds3
                                  -> case ds3 of wild4 {
                                       [] -> (s1, s2, s3, s4, ww2)
                                       : ipv ipv1 -> Hw3.test117 GHC.Prim.void# } } } } } }) -}
72000618aad7ae25bfd4e8faa899c2f7
  test117 ::
    GHC.Prim.Void#
    -> (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
fdc9ae9b837e2829f05d6188564f6996
  test118 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test27) -}
6ef3d3d1edbf258cc3cf7d3d717e1575
  test119 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test33, Hw3.test120)) -}
8514e0c374b72dfda1f09d6351af630f
  test12 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test51
                   Hw3.test13) -}
9fecc5fa460358b544037fdf49b6956a
  test120 :: Hw3.Signal
  {- Unfolding: (case Hw3.test116 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s4 }) -}
2594dcd98fc4105cf4074e123629a4d9
  test121 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test36, Hw3.test122)) -}
35d1251815bc39ee8b527bf1878b8bae
  test122 :: Hw3.Signal
  {- Unfolding: (case Hw3.test116 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s3 }) -}
3a95d94967292f98eb5175ef1daa9a6c
  test123 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test124)) -}
b02d829f7598779a1635974f76c045a2
  test124 :: Hw3.Signal
  {- Unfolding: (case Hw3.test116 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s2 }) -}
e6dc80582eede1f1606b0f0ef3853ef7
  test125 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test42, Hw3.test126)) -}
2292b5550563193def2d67b99fc7d053
  test126 :: Hw3.Signal
  {- Unfolding: (case Hw3.test116 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s1 }) -}
5389aeea54a685faa6efab896fafac90
  test127 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test50,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
4e3c4c2f32e33b5e4a8e920e252a2480
  test128 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test129 Hw3.genBSTop4) -}
3bfdb35f74cdb6e9b0972607f7e35ce1
  test129 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test51
                   Hw3.test130) -}
e9bd2558148347509ce02583e0751350
  test13 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test49
                   Hw3.test14) -}
f9151aa662e23d82737bf88eb3c82ff9
  test130 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test127
                   Hw3.test131) -}
de5ffa9187d6a8f85b474654c5085fec
  test131 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test153
                   Hw3.test132) -}
4c721df99134f9c22b67ff4fdf73e8e8
  test132 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test45
                   Hw3.test133) -}
b9ce61a726952d0b51ebf3be0b939085
  test133 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test152
                   Hw3.test134) -}
04c3cf3a6be3c496cdff285bd6e5c485
  test134 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test150
                   Hw3.test135) -}
687f1c92ef08658889bc8bc871fe7a44
  test135 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test148
                   Hw3.test136) -}
21753b75c2d3dcb0bd0c284c021d2c76
  test136 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test146
                   Hw3.test137) -}
759deb5047b610f605902c28e6d7a9a5
  test137 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test144
                   Hw3.test138) -}
4fde7e2e7c8e0e43f2d6c6783eefe4aa
  test138 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test139
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
fc7c5fcd9542b2bbb22ec3252ecc1f1d
  test139 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test30, Hw3.test140)) -}
28d2eaa43d5ac1703f8d8a0a3ea7a267
  test14 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test47
                   Hw3.test15) -}
03db4b3745ff76e66178d29e4b2853c8
  test140 :: Hw3.Signal
  {- Unfolding: (case Hw3.test141 of ds { (,,,,) s1 s2 s3 s4 c ->
                 c }) -}
3dcff9ee1bd1f8e4e679efe4c58f1607
  test141 ::
    (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wbitSubtractor
                        Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.test143 of ww { (#,#) ww1 ww2 ->
                 case ww1 of wild {
                   [] -> Hw3.test142 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test142 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> Hw3.test142 GHC.Prim.void#
                             : s3 ds2
                             -> case ds2 of wild3 {
                                  [] -> Hw3.test142 GHC.Prim.void#
                                  : s4 ds3
                                  -> case ds3 of wild4 {
                                       [] -> (s1, s2, s3, s4, ww2)
                                       : ipv ipv1 -> Hw3.test142 GHC.Prim.void# } } } } } }) -}
86e9e4d8f42fd66f060a2a73fcfdc9eb
  test142 ::
    GHC.Prim.Void#
    -> (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
e405a6f26f46d18f2806c1a2a93c31e8
  test143 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test72) -}
5fb97f7c06b731761572aab8ef68733d
  test144 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test33, Hw3.test145)) -}
5f58267ad61db5b915abcde7187601ef
  test145 :: Hw3.Signal
  {- Unfolding: (case Hw3.test141 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s4 }) -}
41daa6b512edf55092a7ca445e402af0
  test146 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test36, Hw3.test147)) -}
eaa768612ef7746bb12c35abd3e8a2f2
  test147 :: Hw3.Signal
  {- Unfolding: (case Hw3.test141 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s3 }) -}
307091cb7349d68e9d92a554bd051e02
  test148 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test149)) -}
b91ad8ac983730e1ae76d5d05372933b
  test149 :: Hw3.Signal
  {- Unfolding: (case Hw3.test141 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s2 }) -}
955d1253b6be3d07a9a0d0b0fd445a78
  test15 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test45
                   Hw3.test16) -}
e6e34381845497ada8c295d8edfdfa9a
  test150 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test42, Hw3.test151)) -}
4b4ab24ac3d5be6fa8afc42cc64fec50
  test151 :: Hw3.Signal
  {- Unfolding: (case Hw3.test141 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s1 }) -}
4309e4054d8e197dbebc6c4db1dbfa67
  test152 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test44,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
f04dd00305290dcb3b25985c23081b2f
  test153 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test48,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
b7cea1f82076f449f7c3bc0e0c92d52a
  test154 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test155 Hw3.genBSTop4) -}
7123301bcce1accac6b7b9a3c39a7c39
  test155 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test51
                   Hw3.test156) -}
1dade0898f9ab2dc9f03ef597e27ab32
  test156 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test127
                   Hw3.test157) -}
8e7f0e6e5547cbe54bbeb557dff1f9cb
  test157 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test153
                   Hw3.test158) -}
44828ef13307f118b8d6c1136de6a9b6
  test158 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test45
                   Hw3.test159) -}
b662a12131045419f59d42b553eceab2
  test159 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test43
                   Hw3.test160) -}
3e9f4a77f806d762f64e8c84de98898f
  test16 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test43
                   Hw3.test17) -}
2a50d84037df6d601979e7a04c49d865
  test160 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test177
                   Hw3.test161) -}
ef5ca3c89f5c1be0f86ee7265c530508
  test161 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test175
                   Hw3.test162) -}
49098d2cfa30c6972d97a87425763da6
  test162 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test173
                   Hw3.test163) -}
1ffbe1c95005778de5561fb0d0fc9245
  test163 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test171
                   Hw3.test164) -}
967d7259e81e2142bcfe56846b06b65a
  test164 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test165
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
55b8947f5437231fc45e43f6a62c281d
  test165 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test30, Hw3.test166)) -}
f981c11f2d0339934c65af530708a678
  test166 :: Hw3.Signal
  {- Unfolding: (case Hw3.test167 of ds { (,,,,) s1 s2 s3 s4 c ->
                 c }) -}
bdbc848d488885f23754c8ec1262036d
  test167 ::
    (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wbitSubtractor
                        Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.test169 of ww { (#,#) ww1 ww2 ->
                 case ww1 of wild {
                   [] -> Hw3.test168 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test168 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> Hw3.test168 GHC.Prim.void#
                             : s3 ds2
                             -> case ds2 of wild3 {
                                  [] -> Hw3.test168 GHC.Prim.void#
                                  : s4 ds3
                                  -> case ds3 of wild4 {
                                       [] -> (s1, s2, s3, s4, ww2)
                                       : ipv ipv1 -> Hw3.test168 GHC.Prim.void# } } } } } }) -}
5c7775b15995e81047e653b970ad3426
  test168 ::
    GHC.Prim.Void#
    -> (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
8e51efba6e17f65e32dfa2a4647b7fef
  test169 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test170) -}
d55dabdfcf5f88724dd91674a67ac2d6
  test17 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test40
                   Hw3.test18) -}
06d0c5c2c8282b5541d362d9b0c94cdc
  test170 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test28) -}
221e4caa4d27ad003f8d06343036a53d
  test171 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test33, Hw3.test172)) -}
a122121dec36d5ac69c2ec6c6ba5271b
  test172 :: Hw3.Signal
  {- Unfolding: (case Hw3.test167 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s4 }) -}
71317869ecb68cf1a7b6c8cba0ec68a9
  test173 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test36, Hw3.test174)) -}
e4fcaf20cc061095db246ee4cc0b9244
  test174 :: Hw3.Signal
  {- Unfolding: (case Hw3.test167 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s3 }) -}
8473d249c296e78dee8df61caabec917
  test175 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test176)) -}
35a675f966bbb225e88936220a62a1b3
  test176 :: Hw3.Signal
  {- Unfolding: (case Hw3.test167 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s2 }) -}
112944a41f38388e5153e578d9f06a45
  test177 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test42, Hw3.test178)) -}
4f96ea7aac689cd967ddce3bd84f725d
  test178 :: Hw3.Signal
  {- Unfolding: (case Hw3.test167 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s1 }) -}
6a5555b72274ba2be02ba7585d913b6a
  test179 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test180 Hw3.genBSTop4) -}
9308597d30033e5e45621ee2f66b6671
  test18 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test37
                   Hw3.test19) -}
90547319325624027df78cf2d369bc7f
  test180 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test101
                   Hw3.test181) -}
6a3254e6b3b0e6d6da267d0a24860871
  test181 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test93
                   Hw3.test182) -}
f35ad5d9a624822a1e9eecc6aeae6bff
  test182 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test188
                   Hw3.test183) -}
000911e2d1ac6988e433da09491207d9
  test183 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test184
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
65e2bd496b928aaa3dafcec9226ab4f8
  test184 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test185)) -}
1fb5718c0066e90e9b390f76cea89947
  test185 :: Hw3.Signal
  {- Unfolding: (case Hw3.test186 of ds { (,) s1 s2 -> s2 }) -}
0cf9802a6568c297bb4e22608d52d141
  test186 :: (Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wmultiplier
                        Hw3.test29
                        Hw3.test29 of wild {
                   [] -> Hw3.test187 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test187 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> (s1, s2) : ipv ipv1 -> Hw3.test187 GHC.Prim.void# } } }) -}
3020bc98f7179d5841d6ad82ea1812a8
  test187 :: GHC.Prim.Void# -> (Hw3.Signal, Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
5f2bf4998553ef90978a9f39277b0cc1
  test188 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test86, Hw3.test189)) -}
64326b366f2fd47f09e11cc025616acb
  test189 :: Hw3.Signal
  {- Unfolding: (case Hw3.test186 of ds { (,) s1 s2 -> s1 }) -}
f00933786d35277f0cc5e8eff1ce2505
  test19 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test34
                   Hw3.test20) -}
c9fa86219f4cbf7e58a7eb8f82e0fa8a
  test190 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test191 Hw3.genBSTop4) -}
51cf4848470c28cb4c5bb902f2fc4cc0
  test191 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test101
                   Hw3.test192) -}
fc077305696ff5cc28cffee060d95d33
  test192 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test99
                   Hw3.test193) -}
f96d2e652f05512ecc32224795a774cf
  test193 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test223
                   Hw3.test194) -}
f638da07bcd5cf26ecbf99ba90c30916
  test194 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test93
                   Hw3.test195) -}
e19eb8f40add22ac5174f93086962a94
  test195 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test222
                   Hw3.test196) -}
9a4a1090a3edbfcfd56328f5636b9e24
  test196 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test221
                   Hw3.test197) -}
9cf7d419e1aead686e21177c09ed0d44
  test197 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test219
                   Hw3.test198) -}
bc5c6263bc61fa34a1e988b074334045
  test198 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test217
                   Hw3.test199) -}
da690331ea77a17055251dd5204066b5
  test199 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test215
                   Hw3.test200) -}
1981ddc945748cfab8398d416ffc52d5
  test1a :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test1a1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
28907f1a6a74fb78ca60065862ec378d
  test1a1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test1a2 Hw3.genBSTop4) -}
37cb7f14d8a2c4f2f3168b95a31db393
  test1a10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cout"#) -}
932f0f550c4b81b651a0f73f5e73ad3e
  test1a11 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test1a13, Hw3.test1a12)) -}
5edcabbe73042929e7d2f2050fe00359
  test1a12 :: Hw3.Signal
  {- Unfolding: (case Hw3.test1a9 of wild { (,) sum cout -> sum }) -}
0aaa3d332c83391bb8dee536a6eec38a
  test1a13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "  sum"#) -}
bdf7d906b4bb7d3e3a7dc5a11a9c238c
  test1a14 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test1a15,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
803a370a050892fd01a2a6eca8533f21
  test1a15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y"#) -}
884e581f854dd66b2cc3f54a52773ca9
  test1a16 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test1a17,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
3089343988f7c70fbed514eb07da5719
  test1a17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x"#) -}
42495cd4348f7b77f24b2785b1b2e25c
  test1a2 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test51
                   Hw3.test1a3) -}
51546efe48f8ae20852501d7eb6b0ace
  test1a3 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test1a16
                   Hw3.test1a4) -}
b544e839681d667cb9a8086df45e0953
  test1a4 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test1a14
                   Hw3.test1a5) -}
05f890281af0e4a15d98ebecedf571ac
  test1a5 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test1a11
                   Hw3.test1a6) -}
9d677cf9decd9eeebf7eadac64fdfbc0
  test1a6 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test1a7
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
7eb94811fcdec286b6c2603ca3081b62
  test1a7 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test1a10, Hw3.test1a8)) -}
aeab0b08bd6551754e96b6d80b67aef1
  test1a8 :: Hw3.Signal
  {- Unfolding: (case Hw3.test1a9 of wild { (,) sum cout ->
                 cout }) -}
3904ad57d3624c9c0095c717b0b340a6
  test1a9 :: (Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wfulladd
                        Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.high_xs
                          `cast`
                        (Sym (Hw3.NTCo:Signal[0])) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d9551ae75add3cea75ae0917cb4b5400
  test2 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test53 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
872a030518f1fffc7af69880dad57443
  test20 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test31
                   Hw3.test21) -}
841faa3c8cb1b5e7f52b0ee73c97bfb0
  test200 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test213
                   Hw3.test201) -}
9fb07d6d4ce96faddee49e507ec82b58
  test201 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test210
                   Hw3.test202) -}
c043c8c420a925d0729b815ef9a60e6c
  test202 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test203
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
b1e9a23a1742c6492ccd9ae3c3b04300
  test203 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test209, Hw3.test204)) -}
f2a1bf1a289ee7ceecd9307d6c2d015a
  test204 :: Hw3.Signal
  {- Unfolding: (case Hw3.test205 of ds { (,,,,,) s1 s2 s3 s4 s5 s6 ->
                 s6 }) -}
cc5f0bf2ba45710250ef3e9f2c55ac72
  test205 ::
    (Hw3.Signal,
     Hw3.Signal,
     Hw3.Signal,
     Hw3.Signal,
     Hw3.Signal,
     Hw3.Signal)
  {- Unfolding: (case Hw3.$wmultiplier
                        Hw3.test207
                        Hw3.test207 of wild {
                   [] -> Hw3.test206 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test206 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> Hw3.test206 GHC.Prim.void#
                             : s3 ds2
                             -> case ds2 of wild3 {
                                  [] -> Hw3.test206 GHC.Prim.void#
                                  : s4 ds3
                                  -> case ds3 of wild4 {
                                       [] -> Hw3.test206 GHC.Prim.void#
                                       : s5 ds4
                                       -> case ds4 of wild5 {
                                            [] -> Hw3.test206 GHC.Prim.void#
                                            : s6 ds5
                                            -> case ds5 of wild6 {
                                                 [] -> (s1, s2, s3, s4, s5, s6)
                                                 : ipv ipv1
                                                 -> Hw3.test206 GHC.Prim.void# } } } } } } }) -}
41bb0e0869036ba511aaa1d5a81e1e56
  test206 ::
    GHC.Prim.Void#
    -> (Hw3.Signal,
        Hw3.Signal,
        Hw3.Signal,
        Hw3.Signal,
        Hw3.Signal,
        Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
3510c7a2063a0b79b9104af5cafd347b
  test207 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test208) -}
146a8ee606a64f8118e779ecf306f2d9
  test208 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test29) -}
f27f05f675b306a741af3ecf330c81ba
  test209 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s6"#) -}
315cbd1ab1179a176c9cca51f4057cfc
  test21 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test22
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
55bb151558667283370278bf246237cb
  test210 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test212, Hw3.test211)) -}
866afc4377f61463b18ad2445aacf7f3
  test211 :: Hw3.Signal
  {- Unfolding: (case Hw3.test205 of ds { (,,,,,) s1 s2 s3 s4 s5 s6 ->
                 s5 }) -}
fdaa59a7d9cd1f98ccd99b56bc149d1d
  test212 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s5"#) -}
42e0f4513dabbd51f6cfb9dee673cad8
  test213 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test33, Hw3.test214)) -}
fa32cbb2a27222164f8e112a135d2832
  test214 :: Hw3.Signal
  {- Unfolding: (case Hw3.test205 of ds { (,,,,,) s1 s2 s3 s4 s5 s6 ->
                 s4 }) -}
b7840c2a2421272a334cf6cb5f36c24f
  test215 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test36, Hw3.test216)) -}
3d9a0f81e8012d0395d73c867ad1463a
  test216 :: Hw3.Signal
  {- Unfolding: (case Hw3.test205 of ds { (,,,,,) s1 s2 s3 s4 s5 s6 ->
                 s3 }) -}
d43a4a85f2d1daed2f63a26be0676ebe
  test217 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test218)) -}
fb8fcf89b961bf05a186e0476f03edc6
  test218 :: Hw3.Signal
  {- Unfolding: (case Hw3.test205 of ds { (,,,,,) s1 s2 s3 s4 s5 s6 ->
                 s2 }) -}
07031fedd20b1976c9d02c136ba8caba
  test219 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test86, Hw3.test220)) -}
590a3f40d7e69c75636338c35f5bdb76
  test22 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test30, Hw3.test23)) -}
2efdd7e56c46b37f2ac47f19b3410b8d
  test220 :: Hw3.Signal
  {- Unfolding: (case Hw3.test205 of ds { (,,,,,) s1 s2 s3 s4 s5 s6 ->
                 s1 }) -}
6edb83fa2a58508c33dfb1a8415f29e4
  test221 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test90,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
d4057f424c3f7682e33836811c90d995
  test222 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test92,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
36e6281ed93000ad2bd815fd36ecbb7e
  test223 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test98,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
daef70e1a7c885ce2564ab5daf026e7a
  test23 :: Hw3.Signal
  {- Unfolding: (case Hw3.test24 of ds { (,,,,) s1 s2 s3 s4 c ->
                 c }) -}
a734d310e4ce0170526eecc4cc8ec5fd
  test24 ::
    (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wbitAdder
                        Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.test26 of ww { (#,#) ww1 ww2 ->
                 case ww1 of wild {
                   [] -> Hw3.test25 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test25 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> Hw3.test25 GHC.Prim.void#
                             : s3 ds2
                             -> case ds2 of wild3 {
                                  [] -> Hw3.test25 GHC.Prim.void#
                                  : s4 ds3
                                  -> case ds3 of wild4 {
                                       [] -> (s1, s2, s3, s4, ww2)
                                       : ipv ipv1 -> Hw3.test25 GHC.Prim.void# } } } } } }) -}
3ac849987be5a34a58738842ccd82e6b
  test25 ::
    GHC.Prim.Void#
    -> (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
7669be7fa8cffa0a4cc08cbc31b50b91
  test26 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test27) -}
a7ff3d401ad5f2578304dab0c4206a5d
  test27 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test28) -}
8086c1318bc29648991327f792a45e58
  test28 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test29) -}
3eacbebf657a73aa119a1c2bb3479551
  test29 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   (GHC.Types.[] @ Hw3.Signal)) -}
4a852e62e12960b3066ebdc31fd9c594
  test3 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test103 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0f97a47b444dc4f07dcc2fec5d219a5e
  test30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "c"#) -}
40f8c350ded118594a174eaa50c093dd
  test31 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test33, Hw3.test32)) -}
d15a5455dd32e924566c22e436d271c7
  test32 :: Hw3.Signal
  {- Unfolding: (case Hw3.test24 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s4 }) -}
09541abf80d1f990a6b2b6080608d125
  test33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s4"#) -}
ca8cc9c23c9db4cf69d6a8473d75d961
  test34 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test36, Hw3.test35)) -}
b22e4ccc4eb1ff7b1ca116452590d82d
  test35 :: Hw3.Signal
  {- Unfolding: (case Hw3.test24 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s3 }) -}
dca76b02d553edf56b32232cce2fa0f7
  test36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s3"#) -}
f8c505db6eb7007db7b156df8187b6c0
  test37 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test38)) -}
83ad385ca4c0ee840923639644bfc8af
  test38 :: Hw3.Signal
  {- Unfolding: (case Hw3.test24 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s2 }) -}
20cb8842c09728b687967b291a67d581
  test39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "s2"#) -}
5a7dc04f1dc4bb69657ce9f150b61856
  test4 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test128 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
30102bff0e4912c0628822c97b389cf2
  test40 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test42, Hw3.test41)) -}
2013feee4f1658bac902606f4f8a63d3
  test41 :: Hw3.Signal
  {- Unfolding: (case Hw3.test24 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s1 }) -}
1133521d5644dbdf8e2871dfde38ff70
  test42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "  s1"#) -}
b0d22d2b8028d1284665c43097eaf95d
  test43 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test44,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
a3a8ba6c23a526af6c5c51439090caa4
  test44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "in4"#) -}
33cf2596ed9196a9b51b77915be21a79
  test45 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test46,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
f6086314561dc70b677273585a199909
  test46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "in3"#) -}
92750f152768cb4d23fedb94e628dd87
  test47 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test48,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
1bb297ff3b38d4c7ba392e2dbeb5c965
  test48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "in2"#) -}
d29f3559dff4109e5e9ec689e0f0f923
  test49 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test50,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
d22440342161d36d7692f166fd1bbd17
  test5 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test154 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
236ef82dd29228a78960e64a285e07b9
  test50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "in1"#) -}
9cbfa4ab19db2cd9af35fdedc7873356
  test51 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test52,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
c2b8e701cc0096552d0c84b9e187951a
  test52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "cin"#) -}
bafff3d56e62bc12c3d5b5471f4d3b17
  test53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Unfolding: (Hw3.probe2 Hw3.test54 Hw3.genBSTop4) -}
3f410ce2b87097f310d7e325f6d3d2dd
  test54 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test101
                   Hw3.test55) -}
ce0a7d08fbaf7fba5933f190684508a8
  test55 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test99
                   Hw3.test56) -}
bad8b3a95b419d76e5df36cf17f67351
  test56 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test97
                   Hw3.test57) -}
62c330134d5c0e2788880ee0472cb5d0
  test57 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test95
                   Hw3.test58) -}
90454dba68fae822ff4ac1408946de04
  test58 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test93
                   Hw3.test59) -}
a7924b21514f1be8369fd4b901ff6ebf
  test59 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test91
                   Hw3.test60) -}
0d2f8535bfa4341fe02b68d514398246
  test6 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test179 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6bff049dd5d6145686ee2b06243fec2b
  test60 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test89
                   Hw3.test61) -}
42c0564a28cfe87734b1573d516f193c
  test61 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test87
                   Hw3.test62) -}
ddbea97444b80c84f5bcb499c1a85967
  test62 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test84
                   Hw3.test63) -}
7a5d0ff75ca8ae80b11fd39b8ee2dd9f
  test63 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test82
                   Hw3.test64) -}
e4f8c86d6800c6c42378e332fea6bae5
  test64 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test80
                   Hw3.test65) -}
4aaf23450e68d0fd29e104cb67cf1aa8
  test65 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test78
                   Hw3.test66) -}
9ae1fd187476c9b5b8150804554db094
  test66 :: [(GHC.Base.String, Hw3.Signal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Hw3.Signal)
                   Hw3.test67
                   (GHC.Types.[] @ (GHC.Base.String, Hw3.Signal))) -}
414dded735d9d2b4f303997f5071b02a
  test67 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test77, Hw3.test68)) -}
330ef06122ed24f98f54b280eff8df51
  test68 :: Hw3.Signal
  {- Unfolding: (case Hw3.test69 of ds { (,,,,) s1 s2 s3 s4 c ->
                 c }) -}
8f4608789245a37d55ce233bdc0283fd
  test69 ::
    (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Unfolding: (case Hw3.$wadderAux
                        Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                        Hw3.test75
                        Hw3.test71 of ww { (#,#) ww1 ww2 ->
                 case GHC.Base.++
                        @ Hw3.Signal
                        ww1
                        (GHC.Types.:
                           @ Hw3.Signal
                           ww2
                           (GHC.Types.[] @ Hw3.Signal)) of wild {
                   [] -> Hw3.test70 GHC.Prim.void#
                   : s1 ds
                   -> case ds of wild1 {
                        [] -> Hw3.test70 GHC.Prim.void#
                        : s2 ds1
                        -> case ds1 of wild2 {
                             [] -> Hw3.test70 GHC.Prim.void#
                             : s3 ds2
                             -> case ds2 of wild3 {
                                  [] -> Hw3.test70 GHC.Prim.void#
                                  : s4 ds3
                                  -> case ds3 of wild4 {
                                       [] -> Hw3.test70 GHC.Prim.void#
                                       : c ds4
                                       -> case ds4 of wild5 {
                                            [] -> (s1, s2, s3, s4, c)
                                            : ipv ipv1
                                            -> Hw3.test70 GHC.Prim.void# } } } } } } }) -}
2fa5172fb452ac0f578430edb3fb484e
  test7 :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Hw3.test190 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
93c7454ab5b53cb78e87e53f89a9b297
  test70 ::
    GHC.Prim.Void#
    -> (Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal, Hw3.Signal)
  {- Arity: 1, Strictness: <B,A>b -}
5c4503f490bd322cbd9cd0805d6ec0a7
  test71 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test72) -}
2b7682570d75e9b8bf49c884d9639dbb
  test72 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test73) -}
988ce6c30d897c793c474e4868a3fdc0
  test73 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test74) -}
99ad099bba6d22a695bbb17eeb3e39a6
  test74 :: [Hw3.Signal]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   (GHC.Types.[] @ Hw3.Signal)) -}
807adee5c899aac3f77e305cb27680c7
  test75 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test76) -}
4b2552c04b6f93e5c0af67c73b7b9fb8
  test76 :: [Hw3.Signal]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Hw3.Signal
                   Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0]))
                   Hw3.test73) -}
0b7ea86bd47e38bb13ed872699ac94c3
  test77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " c"#) -}
d02e56600f3ea74d58cd2fb015d5017a
  test78 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test33, Hw3.test79)) -}
d51f4ea178a9def5c353eea6f7f213e7
  test79 :: Hw3.Signal
  {- Unfolding: (case Hw3.test69 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s4 }) -}
e0dfd7cdd82743a35f69ca1769a2f98c
  test80 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test36, Hw3.test81)) -}
b2190196e9cc0189bd851ed91cf2829e
  test81 :: Hw3.Signal
  {- Unfolding: (case Hw3.test69 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s3 }) -}
88843690d2dc59de392c71d7cc94276f
  test82 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test39, Hw3.test83)) -}
b86eed7350a01309b9b7ac7ae8575a43
  test83 :: Hw3.Signal
  {- Unfolding: (case Hw3.test69 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s2 }) -}
5a2f2f8b63b193bf3cb11ebb0f7b073c
  test84 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m, Unfolding: ((Hw3.test86, Hw3.test85)) -}
2d2ed7eab28dbec6890505bdcd1faa94
  test85 :: Hw3.Signal
  {- Unfolding: (case Hw3.test69 of ds { (,,,,) s1 s2 s3 s4 c ->
                 s1 }) -}
c76b4973de29662e882a0c8d7ab0a54a
  test86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " s1"#) -}
2d1f7e73028965f47cbafbca63567e14
  test87 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test88,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
92d9e6124f03e04943c6f9142d2fd3c5
  test88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y4"#) -}
c524c48169ff0db62778d7a76d1d50c1
  test89 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test90,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
303d0ec907cca4650e1d1fb8327b064c
  test90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y3"#) -}
ee71fac9cc40086cbeb14b3137b572cf
  test91 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test92,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
29659f7206bb6c43f9582f1a94b9fc3e
  test92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y2"#) -}
b5bc07d4aaa520a636b02ba53a84b4ef
  test93 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test94,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
187ae9c1c00046ef744ebd0d475cd661
  test94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " y1"#) -}
c1d65584a23958e5ddc1caa0154c3022
  test95 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test96,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
759e5f1b6f80e5976b998a576f4ce3ca
  test96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x4"#) -}
efec9d3aee26dfcd24de8d67a1eb7b15
  test97 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test98,
                  Hw3.adder_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
f24742886daf52c1ba07a71de24cd2c6
  test98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x3"#) -}
11b5de820d210cafc042f66187b63c97
  test99 :: ([GHC.Types.Char], Hw3.Signal)
  {- Strictness: m,
     Unfolding: ((Hw3.test100,
                  Hw3.high_xs `cast` (Sym (Hw3.NTCo:Signal[0])))) -}
c5e7da16bf681ab91c84de1e6097cb68
  testprog1 :: Hw3.Statement
  {- Unfolding: (Hw3.testprog1_go Hw3.testprog4) -}
e6f7df1292d0c18a201c67e85bc88870
  testprog10 :: Hw3.Expression
  {- HasNoCafRefs, Unfolding: (Hw3.Val Hw3.testprog11) -}
6645a9af4d60a7a8db3d4290a72fcfca
  testprog11 :: Hw3.Value
  {- HasNoCafRefs, Unfolding: (Hw3.IntVal Hw3.testprog12) -}
5875720f3e3ba4828cf562c9c24f825a
  testprog12 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3) -}
5884bde13337db70075afd3a9b46d12f
  testprog13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Z"#) -}
3b809109564577c20a3c17442b56b640
  testprog14 :: Hw3.Statement
  {- Unfolding: (Hw3.If Hw3.testprog21 Hw3.testprog15 Hw3.Skip) -}
a5fdc518b345d76b02019279f62e72a8
  testprog15 :: Hw3.Statement
  {- Unfolding: (Hw3.Throw Hw3.testprog16) -}
7c9ffa40271effe091b52d2c46962e9c
  testprog16 :: Hw3.Expression
  {- Unfolding: (Hw3.Op Hw3.Plus Hw3.testprog19 Hw3.testprog17) -}
3945d14e804b7d64039c0121393a7367
  testprog17 :: Hw3.Expression
  {- Unfolding: (Hw3.Var Hw3.testprog18) -}
60d3620636afa9868122fb2cc89c062e
  testprog18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Y"#) -}
78fbac9853c779f3b1c0579d8eab758c
  testprog19 :: Hw3.Expression
  {- Unfolding: (Hw3.Var Hw3.testprog20) -}
444c8e4b9e771ad04a6d05d634dd64be
  testprog1_go :: [Hw3.Statement] -> Hw3.Statement
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b5eecb4022cce295297b792480da4df3
  testprog2 :: Hw3.Statement
  {- Strictness: m4,
     Unfolding: (Hw3.Sequence Hw3.testprog27 Hw3.testprog30) -}
ef2648d27ee2bbd21b2e1d957d8ec459
  testprog20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "X"#) -}
e0711de451f01b4a088ae8cf521d938e
  testprog21 :: Hw3.Expression
  {- Strictness: m3,
     Unfolding: (Hw3.Op Hw3.Lt Hw3.testprog19 Hw3.testprog17) -}
7fa1400dfeebac3ddd45e5a4b7e54c6a
  testprog22 :: Hw3.Statement
  {- Unfolding: (Hw3.Print Hw3.testprog23 Hw3.testprog19) -}
898582a2081edf8b90c7090846c3d485
  testprog23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hello world: "#) -}
9038bcacc7d33a5cc0a5848c80ccc4bc
  testprog24 :: Hw3.Statement
  {- Strictness: m1,
     Unfolding: (Hw3.Assign Hw3.testprog18 Hw3.testprog25) -}
17107e6dff368a39cf0111d41dddfee7
  testprog25 :: Hw3.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw3.Val Hw3.testprog26) -}
7059a7bfc16344f3a729a9e3f4076fdb
  testprog26 :: Hw3.Value
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Hw3.IntVal Hw3.genBSTop4) -}
269d91fe9f649060bffa0f01a583f2af
  testprog27 :: Hw3.Statement
  {- Strictness: m1,
     Unfolding: (Hw3.Assign Hw3.testprog20 Hw3.testprog28) -}
b903f4f46e074f09bcdab9dcedf0001c
  testprog28 :: Hw3.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw3.Val Hw3.testprog29) -}
ff6e576b2943bdd69975479e32223273
  testprog29 :: Hw3.Value
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Hw3.IntVal Hw3.$fShowBST2) -}
b4fe3f9cdde403626641863bcb695409
  testprog2_go :: [Hw3.Statement] -> Hw3.Statement
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6d2d91db9b38b09e1e2e56956b0ac9c4
  testprog30 :: Hw3.Statement
  {- Strictness: m4,
     Unfolding: (Hw3.Sequence Hw3.testprog24 Hw3.testprog31) -}
afcf2cc27536430b5082258c38135b40
  testprog31 :: Hw3.Statement
  {- Strictness: m4,
     Unfolding: (Hw3.Sequence Hw3.testprog32 Hw3.Skip) -}
dae4b9e472a38fb60f9a532eb8d4d314
  testprog32 :: Hw3.Statement
  {- Strictness: m8,
     Unfolding: (Hw3.Try
                   Hw3.testprog39
                   Hw3.testprog38
                   Hw3.testprog33) -}
e165a785cef93449f9ba47e6580319e0
  testprog33 :: Hw3.Statement
  {- Strictness: m1,
     Unfolding: (Hw3.Assign Hw3.testprog13 Hw3.testprog34) -}
27913888bbc475673ec6e771ccfd61d5
  testprog34 :: Hw3.Expression
  {- Strictness: m3,
     Unfolding: (Hw3.Op Hw3.Plus Hw3.testprog37 Hw3.testprog35) -}
e5d3497bb0a23da61e7899faf5acb1ea
  testprog35 :: Hw3.Expression
  {- Strictness: m1, Unfolding: (Hw3.Var Hw3.testprog36) -}
40d29633fc5f3fb7bf5ff4dd9a16d91b
  testprog36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A"#) -}
ef4acf28264598eeb49d1802089bf85b
  testprog37 :: Hw3.Expression
  {- Strictness: m1, Unfolding: (Hw3.Var Hw3.testprog38) -}
4e79f7122abcec1851d8be3787401cf5
  testprog38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "E"#) -}
8b87b1123f5ca2956a50a210fb16e763
  testprog39 :: Hw3.Statement
  {- Strictness: m2,
     Unfolding: (Hw3.If Hw3.testprog21 Hw3.testprog40 Hw3.Skip) -}
b5b1a13f1c0d38de54ff095b8a959d55
  testprog4 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog27
                   Hw3.testprog5) -}
20e668c8ba8674cfa128e409ebea6ec8
  testprog40 :: Hw3.Statement
  {- Unfolding: (Hw3.testprog2_go Hw3.testprog41) -}
4f9fdfb8d32551170082a3de9b5962c8
  testprog41 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog49
                   Hw3.testprog42) -}
ada16adbe8cee68514a2b7cbe15e5f00
  testprog42 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog15
                   Hw3.testprog43) -}
d3a262cc66f37040e7c3046567a3673e
  testprog43 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog44
                   (GHC.Types.[] @ Hw3.Statement)) -}
d89ced92f0cbb1ba6d2a8539f14c8494
  testprog44 :: Hw3.Statement
  {- Unfolding: (Hw3.Assign Hw3.testprog48 Hw3.testprog45) -}
eda95640eb7c9d026ba3c82844383bb0
  testprog45 :: Hw3.Expression
  {- HasNoCafRefs, Unfolding: (Hw3.Val Hw3.testprog46) -}
6950eb1697c36307423063bfb42cc308
  testprog46 :: Hw3.Value
  {- HasNoCafRefs, Unfolding: (Hw3.IntVal Hw3.testprog47) -}
5dcef4acdb7b31cf9b9567dcc9e6fec6
  testprog47 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 200) -}
c712882a1eb8e49da6f3d5eac95ec602
  testprog48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B"#) -}
8525d1de44949867a91eea20ff42ab9d
  testprog49 :: Hw3.Statement
  {- Unfolding: (Hw3.Assign Hw3.testprog36 Hw3.testprog50) -}
6011fdaafe4162cf926fed0a1b4ef65d
  testprog5 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog24
                   Hw3.testprog6) -}
4c60f6dfb314ff9aa6383015d60458b5
  testprog50 :: Hw3.Expression
  {- HasNoCafRefs, Unfolding: (Hw3.Val Hw3.testprog51) -}
9df47e56598252e475fedc365caff9a1
  testprog51 :: Hw3.Value
  {- HasNoCafRefs, Unfolding: (Hw3.IntVal Hw3.testprog52) -}
850980f2de3967a7e29360a064ee3693
  testprog52 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 100) -}
249f9d6b14df6f8fe967b9a699474b07
  testprog6 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog22
                   Hw3.testprog7) -}
8c95cf8f269ae15d0a1affbc5fb3185d
  testprog7 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog14
                   Hw3.testprog8) -}
f4560e5dd99c5c4c5945ab8287a74852
  testprog8 :: [Hw3.Statement]
  {- Unfolding: (GHC.Types.:
                   @ Hw3.Statement
                   Hw3.testprog9
                   (GHC.Types.[] @ Hw3.Statement)) -}
78f0836050ae458a780e4885c6a61042
  testprog9 :: Hw3.Statement
  {- Unfolding: (Hw3.Assign Hw3.testprog13 Hw3.testprog10) -}
38c58aab4fe1b9aee8e2a51396aad857
  toBinds :: Hw3.BST t t1 -> [(t, t1)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
baf655d81c3a866d50d47c86b27663dd
  trace ::
    [(GHC.Base.String, Hw3.Signal)] -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw3.probe2
                  `cast`
                (<[(GHC.Base.String, Hw3.Signal)]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
522af48e35cbd1c04f106851ffbed9d6
  truncateSig :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a63 bs :: [a63] -> GHC.List.$wunsafeTake @ a63 20 bs) -}
4b40af165362c93500363174814337bf
  truncatedSignalSize :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a63 $dNum :: GHC.Num.Num a63 ->
                 GHC.Num.fromInteger @ a63 $dNum Hw3.truncatedSignalSize1) -}
7467835bfa1964e73bc8bc69d21e3254
  truncatedSignalSize1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 20) -}
b07e05b74dfe6293b93382425b72e090
  xor2 :: (Hw3.Signal, Hw3.Signal) -> Hw3.Signal
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (Hw3.Signal, Hw3.Signal) ->
                 case ds of wild { (,) ds1 ds2 ->
                 (GHC.Base.build
                    @ GHC.Types.Bool
                    (\ @ b1
                       c1 :: GHC.Types.Bool -> b1 -> b1[OneShot]
                       n :: b1[OneShot] ->
                     GHC.List.foldr2
                       @ GHC.Types.Bool
                       @ GHC.Types.Bool
                       @ b1
                       (GHC.List.zipWithFB
                          @ GHC.Types.Bool
                          @ b1
                          @ b1
                          @ GHC.Types.Bool
                          @ GHC.Types.Bool
                          c1
                          Hw3.fulladd_f)
                       n
                       ds1 `cast` (Hw3.NTCo:Signal[0])
                       ds2 `cast` (Hw3.NTCo:Signal[0])))
                   `cast`
                 (Sym (Hw3.NTCo:Signal[0])) }) -}
instance [overlap ok] Hw3.Agreeable [(,)] = Hw3.$fAgreeable(,)
instance [overlap ok] Hw3.Agreeable [Hw3.Signal]
  = Hw3.$fAgreeableSignal
instance [overlap ok] Hw3.Agreeable [[]] = Hw3.$fAgreeable[]
instance [overlap ok] Test.QuickCheck.Arbitrary.Arbitrary [Hw3.Signal]
  = Hw3.$fArbitrarySignal
instance [overlap ok] Hw3.Binary [GHC.Types.Bool]
  = Hw3.$fBinaryBool
instance [overlap ok] Hw3.Binary [[]] = Hw3.$fBinary[]
instance GHC.Generics.Constructor [Hw3.C1_0Value]
  = Hw3.$fConstructorValue
instance GHC.Generics.Constructor [Hw3.C1_1Value]
  = Hw3.$fConstructorValue0
instance GHC.Generics.Datatype [Hw3.D1Value] = Hw3.$fDatatypeValue
instance [overlap ok] GHC.Classes.Eq [Hw3.BSTop] = Hw3.$fEqBSTop
instance [overlap ok] Control.Monad.Trans.Error.Error [Hw3.Value]
  = Hw3.$fErrorValue
instance [overlap ok] GHC.Generics.Generic [Hw3.Value]
  = Hw3.$fGenericValue
instance [overlap ok] GHC.Show.Show [Hw3.BST] = Hw3.$fShowBST
instance [overlap ok] GHC.Show.Show [Hw3.BSTop] = Hw3.$fShowBSTop
instance [overlap ok] GHC.Show.Show [Hw3.Bop] = Hw3.$fShowBop
instance [overlap ok] GHC.Show.Show [Hw3.Expression]
  = Hw3.$fShowExpression
instance [overlap ok] GHC.Show.Show [Hw3.Signal] = Hw3.$fShowSignal
instance [overlap ok] GHC.Show.Show [Hw3.Statement]
  = Hw3.$fShowStatement
instance [overlap ok] GHC.Show.Show [Hw3.Value] = Hw3.$fShowValue
family instance GHC.Generics.Rep [Hw3.Value] = Hw3.Rep_Value
"SPEC $cshowsPrec @ Int @ Char" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            GHC.Types.Int
                                                $dShow1 :: GHC.Show.Show GHC.Types.Char
  Hw3.$fShowBSTop_$cshowsPrec @ GHC.Types.Int
                              @ GHC.Types.Char
                              $dShow
                              $dShow1
  = Hw3.$fShowBSTop_$s$cshowsPrec
"SPEC $cshowsPrec @ Int @ Char" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            GHC.Types.Int
                                                $dShow1 :: GHC.Show.Show GHC.Types.Char
  Hw3.$fShowBST_$cshowsPrec @ GHC.Types.Int
                            @ GHC.Types.Char
                            $dShow
                            $dShow1
  = Hw3.$fShowBST_$s$cshowsPrec
"SPEC balInsert @ Int _" [ALWAYS] forall @ v
                                         $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Hw3.balInsert @ GHC.Types.Int @ v $dOrd
  = Hw3.balInsert_$sbalInsert @ v
"SPEC bstDelete @ Int _" [ALWAYS] forall @ v
                                         $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Hw3.bstDelete @ GHC.Types.Int @ v $dOrd
  = Hw3.bstDelete_$sbstDelete @ v
"SPEC isBSO @ Int _" [ALWAYS] forall @ b
                                     $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Hw3.isBSO @ GHC.Types.Int @ b $dOrd = Hw3.isBSO_$sisBSO @ b
"SPEC truncatedSignalSize @ Int" [ALWAYS] forall $dNum :: GHC.Num.Num
                                                            GHC.Types.Int
  Hw3.truncatedSignalSize @ GHC.Types.Int $dNum = Hw3.simulate2
"SPEC/Hw3 $dmconFixity @ C1_0Value" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                       Hw3.C1_0Value
  GHC.Generics.$dmconFixity @ Hw3.C1_0Value $dConstructor
  = Hw3.$fConstructorValue_$s$dmconFixity
"SPEC/Hw3 $dmconFixity @ C1_1Value" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                       Hw3.C1_1Value
  GHC.Generics.$dmconFixity @ Hw3.C1_1Value $dConstructor
  = Hw3.$fConstructorValue0_$s$dmconFixity
"SPEC/Hw3 $dmconIsRecord @ C1_0Value" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                         Hw3.C1_0Value
  GHC.Generics.$dmconIsRecord @ Hw3.C1_0Value $dConstructor
  = Hw3.$fConstructorValue_$s$dmconIsRecord
"SPEC/Hw3 $dmconIsRecord @ C1_1Value" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                         Hw3.C1_1Value
  GHC.Generics.$dmconIsRecord @ Hw3.C1_1Value $dConstructor
  = Hw3.$fConstructorValue0_$s$dmconIsRecord
"SPEC/Hw3 $dmisNewtype @ D1Value" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                  Hw3.D1Value
  GHC.Generics.$dmisNewtype @ Hw3.D1Value $dDatatype
  = Hw3.$fDatatypeValue_$s$dmisNewtype
"SPEC/Hw3 $dmshowsPrec @ Signal" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             Hw3.Signal
  GHC.Show.$dmshowsPrec @ Hw3.Signal $dShow
  = Hw3.$fShowSignal_$s$dmshowsPrec
"SPEC/Hw3 $dmshrink @ Signal" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                               Hw3.Signal
  Test.QuickCheck.Arbitrary.$dmshrink @ Hw3.Signal $dArbitrary
  = Hw3.$fArbitrarySignal_$s$dmshrink
"SPEC/Hw3 $fEq(,) @ Int @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                          GHC.Types.Int
                                                $dEq1 :: GHC.Classes.Eq GHC.Types.Char
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Char $dEq $dEq1
  = Hw3.$s$fEq(,)
"SPEC/Hw3 binary @ Bool" [ALWAYS] forall tpl :: Hw3.Binary
                                                  GHC.Types.Bool
  Hw3.binary @ GHC.Types.Bool tpl = Hw3.$cbinary
"SPEC/Hw3 binary @ [Bool]" [ALWAYS] forall tpl :: Hw3.Binary
                                                    [GHC.Types.Bool]
  Hw3.binary @ [GHC.Types.Bool] tpl = Hw3.$cbinary3
"SPEC/Hw3 shows @ (BSTop Int Char)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                (Hw3.BSTop
                                                                   GHC.Types.Int GHC.Types.Char)
  GHC.Show.shows @ (Hw3.BSTop GHC.Types.Int GHC.Types.Char) $dShow
  = Hw3.$fShowBSTop_$sshows
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

