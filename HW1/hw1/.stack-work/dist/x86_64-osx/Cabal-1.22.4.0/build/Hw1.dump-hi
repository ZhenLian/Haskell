
==================== FINAL INTERFACE ====================
2016-10-31 17:24:05.30102 UTC

interface Hw1_BIfEhqsJAjG14532ILwRDE:Hw1 7102
  interface hash: eb80d4bde5798fe133ccf4a04ba3aa0e
  ABI hash: 4a8b52a89b664dbce495f8bd922200e0
  export-list hash: e5777ca677212fba26c66c4ce301b3bb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0dea4790ba5196f40da82bd45085b1c6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hw1.addEachPair
  Hw1.addEachPairNonRecursive
  Hw1.bigger
  Hw1.calculateLowerPt
  Hw1.calculateUpperPts
  Hw1.closeFigure
  Hw1.doubleEach
  Hw1.doubleEachNonRecursive
  Hw1.drawOneSquare
  Hw1.drawOneTri
  Hw1.drawSquares
  Hw1.drawTri
  Hw1.firstDiff
  Hw1.formatPlay
  Hw1.fringe
  Hw1.hanoi
  Hw1.lengthNonRecursive
  Hw1.mainXML
  Hw1.maxList
  Hw1.maxListNonRecursive
  Hw1.minList
  Hw1.minListNonRecursive
  Hw1.myEmail
  Hw1.myFractal
  Hw1.myMap
  Hw1.myName
  Hw1.mySID
  Hw1.p1
  Hw1.p2
  Hw1.p3
  Hw1.pairAndOne
  Hw1.pairAndOneNonRecursive
  Hw1.randomColor
  Hw1.rectangle
  Hw1.rtTriangle
  Hw1.shapeToVertex
  Hw1.sides
  Hw1.sierpinskiCarpet
  Hw1.takeTree
  Hw1.takeTreeWhile
  Hw1.testResults
  Hw1.transBodyToHTML
  Hw1.treeHeight
  Hw1.treeSize
  Hw1.xWin
  Hw1.yWin
  Hw1.InternalTree{Hw1.IBranch Hw1.ILeaf}
  Hw1.Radius
  Hw1.Shape{Hw1.Ellipse Hw1.Polygon Hw1.Rectangle Hw1.RtTriangle}
  Hw1.Side
  Hw1.Tree{Hw1.Branch Hw1.Leaf}
  Hw1.Vertex
module dependencies: Play SOE XMLTypes
package dependencies: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML
                      GLURaw-1.5.0.3@GLURa_2ny2CNM2neI3xjbSQY15Ll
                      ObjectName-1.1.0.1@Objec_29HjkJsOm2S5lSH8rBwSAy
                      OpenGLRaw-2.6.1.1@OpenG_5cg6DP2r5P3Ko8xYSniSgL
                      OpenGL-2.13.2.1@OpenG_7zjfzzP9JI76eT0XwPa8CE
                      StateVar-1.1.0.1@State_6K4a3UqSdqh6lGAm1wlr9s
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      half-0.2.2.2@half_Jb2RpfGRtnLGOEym0KYOr6 integer-gmp-1.0.0.0
                      old-locale-1.0.0.7@oldlo_D6X1KPq5Sui5XjrHMwvFwK
                      old-time-1.1.0.3@oldti_FBWJJDS5FKr7UKFScBcUW2
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
family instance modules: GLFW-0.5.2.4@GLFW_9zDDfiB3zImCMBoPGPEXML:Graphics.UI.GLFW
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
import  -/  Play 6a6e33b8a0943857289687f4da6f5fc3
  exports: e5a800f70dca2275beff12a7566b8cfe
  play 45688161117421bcf860dddcd5b4d94d
import  -/  SOE 6fa814931d3c6aec34d3467882c97da4
  exports: 77bd7ec94baff5840a472109a735130d
  Black 28c70a7f88412ddac81d62331825e8ea
  Blue 73c1194916e5e231fdeaa929631008f6
  Color e255634fdac9ee548b1737e37f419e8e
  Magenta c1e7f810998bc97ca4016f19a6d5c9e0
  Point d1ec474b79a3a3e962673895b9a15d68
  White cc45e4ebea2b893e128f010d1a73d28c
  Window 2dee452b983f74f1d6d94e784d3178de
  closeWindow 442568c71f18462683f26df7721eea20
  drawInWindow bbee0c425e9d5cada9f5ae7147626fa7
  getKey 7b1b5f75a26c89d8675a18a9a209fd43
  openWindow 28afe041e5e4e21f88c408b0031c29a4
  polygon c5e7101f86f655b477befbb354ec09ff
  runGraphics 6a8ef39439cd8236950ee2c1c83f48b1
  withColor fef9b6344ab4ad09feb4c6ddce2aad7b
import  -/  XMLTypes 037c72c6452cf48c1e89475eae72000a
  exports: 2151761c31eaad91bd462c579fb853a4
  Element ea3bc179fb86bc432084a0b3489b30dd
  PCDATA 0d1877dc956e9c1c3ac98757ff09c951
  SimpleXML 259de95812be12badced93b8dbdc2a8b
  xml2string 74c9894bbaa9547faae2d53871652957
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Float a2f1c8675ca4f780f3a8aa0b05d1a5eb
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 29a6f3d7c8ad8a4e6200d8bbb6e70aae
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
708cba7dce3941a242797e8612378990
  $fEqInternalTree ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Hw1.InternalTree a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Hw1.InternalTree a)
                  (Hw1.$fEqInternalTree_$c== @ a $dEq)
                  (Hw1.$fEqInternalTree_$c/= @ a $dEq) -}
708cba7dce3941a242797e8612378990
  $fEqInternalTree_$c/= ::
    GHC.Classes.Eq a =>
    Hw1.InternalTree a -> Hw1.InternalTree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dEq :: GHC.Classes.Eq a
                   a1 :: Hw1.InternalTree a
                   b :: Hw1.InternalTree a ->
                 case Hw1.$fEqInternalTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
708cba7dce3941a242797e8612378990
  $fEqInternalTree_$c== ::
    GHC.Classes.Eq a =>
    Hw1.InternalTree a -> Hw1.InternalTree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree :: GHC.Classes.Eq a => GHC.Classes.Eq (Hw1.Tree a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dEq :: GHC.Classes.Eq a.
                  @ (Hw1.Tree a)
                  (Hw1.$fEqTree_$c== @ a $dEq)
                  (Hw1.$fEqTree_$c/= @ a $dEq) -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree_$c/= ::
    GHC.Classes.Eq a => Hw1.Tree a -> Hw1.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a $dEq :: GHC.Classes.Eq a a1 :: Hw1.Tree a b :: Hw1.Tree a ->
                 case Hw1.$fEqTree_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef754425fcab8354ffb8e24c506383d1
  $fEqTree_$c== ::
    GHC.Classes.Eq a => Hw1.Tree a -> Hw1.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree ::
    GHC.Show.Show a => GHC.Show.Show (Hw1.InternalTree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Hw1.InternalTree a)
                  (Hw1.$fShowInternalTree_$cshowsPrec @ a $dShow)
                  (Hw1.$fShowInternalTree_$cshow @ a $dShow)
                  (Hw1.$fShowInternalTree_$cshowList @ a $dShow) -}
fb81d70741c8819630ae2b73a2aa552b
  $fShowInternalTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshow ::
    GHC.Show.Show a => Hw1.InternalTree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Hw1.InternalTree a ->
                 Hw1.$fShowInternalTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshowList ::
    GHC.Show.Show a => [Hw1.InternalTree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Hw1.InternalTree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw1.InternalTree a)
                   (Hw1.$fShowInternalTree_$cshowsPrec
                      @ a
                      $dShow
                      Hw1.$fShowInternalTree1)
                   eta
                   eta1) -}
708cba7dce3941a242797e8612378990
  $fShowInternalTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Hw1.InternalTree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape :: GHC.Show.Show Hw1.Shape
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw1.Shape
                  Hw1.$fShowShape_$cshowsPrec
                  Hw1.$fShowShape_$cshow
                  Hw1.$fShowShape_$cshowList -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape1 :: Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Hw1.Shape -> Hw1.$w$cshowsPrec 0 w) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshow :: Hw1.Shape -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw1.Shape ->
                 Hw1.$fShowShape_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshowList :: [Hw1.Shape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw1.Shape Hw1.$fShowShape1) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $fShowShape_$cshowsPrec ::
    GHC.Types.Int -> Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw1.Shape ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$w$cshowsPrec ww1 w1 }) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree :: GHC.Show.Show a => GHC.Show.Show (Hw1.Tree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Hw1.Tree a)
                  (Hw1.$fShowTree_$cshowsPrec @ a $dShow)
                  (Hw1.$fShowTree_$cshow @ a $dShow)
                  (Hw1.$fShowTree_$cshowList @ a $dShow) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshow ::
    GHC.Show.Show a => Hw1.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Hw1.Tree a ->
                 Hw1.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Hw1.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Hw1.Tree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw1.Tree a)
                   (Hw1.$fShowTree_$cshowsPrec @ a $dShow Hw1.$fShowInternalTree1)
                   eta
                   eta1) -}
ef754425fcab8354ffb8e24c506383d1
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Hw1.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a w :: GHC.Show.Show a w1 :: GHC.Types.Int w2 :: Hw1.Tree a ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Hw1.$w$cshowsPrec1 @ a w ww1 w2 }) -}
db7ac45cb8f44d2c764444a16f5ed4d2
  $w$cshowsPrec :: GHC.Prim.Int# -> Hw1.Shape -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ef754425fcab8354ffb8e24c506383d1
  $w$cshowsPrec1 ::
    GHC.Show.Show a => GHC.Prim.Int# -> Hw1.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0] -}
04f5e7fc490097f565225cc9b733f494
  $wa ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S,1*U><L,U>,
     Inline: [0] -}
a1c9de343aee6c4448564c292d844b6c
  $wa1 ::
    SOE.Window
    -> SOE.Point
    -> SOE.Point
    -> SOE.Point
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U(U),U(U))><L,U(U(U),A)><L,U(A,U(U))><S,1*U><L,U>,
     Inline: [0] -}
3d0a09b687bc17f2005f7975a39d55d6
  $wa2 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d73814f639f90e7dd4159b029de3b889
  $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
5de80465d06379f3fab6496c5d4a1c8d
  $wgo1 :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
de7995062f1144f5ad44d768a9d14bec
  $wsides :: Hw1.Shape -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
bbc479cad556037a4e4341df6492e462
  $wtreeHeight :: Hw1.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
e6a9e1265ff714f2dd0a1e48f2cb666c
  $wtreeSize :: Hw1.Tree a -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
708cba7dce3941a242797e8612378990
  data InternalTree a
    = ILeaf | IBranch a (Hw1.InternalTree a) (Hw1.InternalTree a)
    Promotable
6991eccce4f7b4ec64db40174e6e75b2
  type Radius = GHC.Types.Float
db7ac45cb8f44d2c764444a16f5ed4d2
  data Shape
    = Rectangle Hw1.Side Hw1.Side
    | Ellipse Hw1.Radius Hw1.Radius
    | RtTriangle Hw1.Side Hw1.Side
    | Polygon [Hw1.Vertex]
837638b1377320c4159828d104b06eae
  type Side = GHC.Types.Float
ef754425fcab8354ffb8e24c506383d1
  data Tree a = Leaf a | Branch (Hw1.Tree a) (Hw1.Tree a)
    Promotable
7225ecb5c1fb9ee5013773c683bf5f6b
  type Vertex = (GHC.Types.Float, GHC.Types.Float)
558dc9473d3b7cdc545514abf8ecc9db
  addEachPair :: [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1329a557464b9c6ed9124bfefd073d3d
  addEachPairNonRecursive ::
    [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ xs :: [(GHC.Types.Int, GHC.Types.Int)] ->
                 Hw1.addEachPairNonRecursive_go xs) -}
b8e8b9cc31777d8d1ceba40ab33a7dec
  addEachPairNonRecursive_go ::
    [(GHC.Types.Int, GHC.Types.Int)] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
afe2d54adaea5572fde86983098e3db4
  bigger :: Hw1.Shape -> GHC.Types.Float -> Hw1.Shape
  {- Arity: 2, Strictness: <S,1*U><L,U(U)> -}
243feaac818909c754ac8f10d6233d0a
  calculateLowerPt :: SOE.Point -> SOE.Point -> SOE.Point
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),U)><S,1*U(1*U(U),A)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: SOE.Point w1 :: SOE.Point ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { (,) ww4 ww5 ->
                 (case ww1 of wild { GHC.Types.I# x ->
                  case ww4 of wild1 { GHC.Types.I# y ->
                  case GHC.Classes.divInt# (GHC.Prim.+# x y) 2 of ww6 { DEFAULT ->
                  GHC.Types.I# ww6 } } },
                  ww2) } }) -}
32295fcdded0a9e269be62a0210b40ed
  calculateUpperPts ::
    SOE.Point -> SOE.Point -> SOE.Point -> GHC.Types.Float -> SOE.Point
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),A)><S,1*U(A,1*U(U))><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: SOE.Point
                   w1 :: SOE.Point
                   w2 :: SOE.Point
                   w3 :: GHC.Types.Float ->
                 case w of ww { (,) ww1 ww2 ->
                 case w1 of ww3 { (,) ww4 ww5 ->
                 case w2 of ww6 { (,) ww7 ww8 ->
                 (case ww4 of wild { GHC.Types.I# x ->
                  case ww1 of wild1 { GHC.Types.I# y ->
                  case w3 of wild2 { GHC.Types.F# y1 ->
                  case {__pkg_ccall base-4.8.1.0 rintFloat GHC.Prim.Float#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Float# #)}
                         (GHC.Prim.timesFloat# (GHC.Prim.int2Float# (GHC.Prim.-# x y)) y1)
                         GHC.Prim.realWorld# of wild3 { (#,#) ds2 ds3 ->
                  GHC.Types.I# (GHC.Prim.+# (GHC.Prim.float2Int# ds3) y) } } } },
                  case ww2 of wild { GHC.Types.I# x ->
                  case ww8 of wild1 { GHC.Types.I# y ->
                  case GHC.Classes.divInt# (GHC.Prim.+# x y) 2 of ww9 { DEFAULT ->
                  GHC.Types.I# ww9 } } }) } } }) -}
6a25df2974f4ad754ebffcf83bb5e19b
  closeFigure :: SOE.Window -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.closeFigure1
                  `cast`
                (<SOE.Window>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
64a51f149819a0ba520ed02b2c975f5f
  closeFigure1 ::
    SOE.Window
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U(U),U(U,U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ w :: SOE.Window
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.getKey1 w eta of ds1 { (#,#) ipv ipv1 ->
                 SOE.closeWindow1 w ipv }) -}
281866c4e7a4288266b8a64f7db7399b
  doubleEach :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ xs :: [GHC.Types.Int] -> Hw1.doubleEach_go xs) -}
d837668e96632468bae9cb7e32183818
  doubleEachNonRecursive :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Base.map
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Hw1.doubleEachNonRecursive1) -}
2f1e0ac8cea094eccfaac1eb2d091d1e
  doubleEachNonRecursive1 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GHC.Types.Int ->
                 case ds of wild { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.*# x 2) }) -}
4eb8c6587aa389f0c9f290c79da681dc
  doubleEach_go :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
446a565392eb33b7c5969be33721888d
  drawOneSquare ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.drawOneSquare1
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c9b51c1923ab7d0fcf8830f437a7c370
  drawOneSquare1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U)><L,U(U)><L,U(U)><L,U>,
     Unfolding: (\ w :: SOE.Window
                   startX :: GHC.Types.Int
                   startY :: GHC.Types.Int
                   sideLength :: GHC.Types.Int
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 SOE.drawInWindow1
                   w
                   (SOE.withColor1
                      Hw1.randomColor
                      (SOE.polygon1
                         (GHC.Types.:
                            @ SOE.Point
                            (startX, startY)
                            (GHC.Types.:
                               @ SOE.Point
                               (GHC.Num.$fNumInt_$c+ startX sideLength, startY)
                               (GHC.Types.:
                                  @ SOE.Point
                                  (GHC.Num.$fNumInt_$c+ startX sideLength,
                                   GHC.Num.$fNumInt_$c+ startY sideLength)
                                  (GHC.Types.:
                                     @ SOE.Point
                                     (startX, GHC.Num.$fNumInt_$c+ startY sideLength)
                                     (GHC.Types.:
                                        @ SOE.Point
                                        (startX, startY)
                                        (GHC.Types.[] @ SOE.Point)))))))
                        `cast`
                      (Trans
                           (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0]))))
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0])))
                   eta) -}
da50780358c13cf86cb3396bd81912ca
  drawOneTri ::
    SOE.Window
    -> SOE.Point -> SOE.Point -> SOE.Point -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U(U),U(U))><L,U(U(U),A)><L,U(A,U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.drawOneTri1
                  `cast`
                (<SOE.Window>_R
                 ->_R <SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8f27859499eb613ad000340cef65e2de
  drawOneTri1 ::
    SOE.Window
    -> SOE.Point
    -> SOE.Point
    -> SOE.Point
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),A)><L,U(U(U),U(U))><L,U(U(U),A)><L,U(A,U(U))><L,U>,
     Unfolding: (\ w :: SOE.Window
                   p9 :: SOE.Point
                   p10 :: SOE.Point
                   p11 :: SOE.Point
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   pA :: SOE.Point
                   = case p9 of wild { (,) x1 y1 ->
                     case p10 of wild1 { (,) x2 y2 ->
                     (case x1 of wild2 { GHC.Types.I# x ->
                      case x2 of wild3 { GHC.Types.I# y ->
                      case GHC.Classes.divInt# (GHC.Prim.+# x y) 2 of ww4 { DEFAULT ->
                      GHC.Types.I# ww4 } } },
                      y1) } }
                 } in
                 SOE.drawInWindow1
                   w
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                           `cast`
                         (GHC.Ptr.FunPtr
                            (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                             ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                    case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.Float#
                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           ds5
                           __float 0.0
                           __float 0.0
                           __float 0.0
                           s of wild1 { (##) ds12 ->
                    SOE.polygon1
                      (GHC.Types.:
                         @ SOE.Point
                         pA
                         (GHC.Types.:
                            @ SOE.Point
                            (case p9 of ww { (,) ww1 ww2 ->
                             case p10 of ww3 { (,) ww4 ww5 ->
                             case p11 of ww6 { (,) ww7 ww8 ->
                             (case ww4 of wild { GHC.Types.I# x ->
                              case ww1 of wild2 { GHC.Types.I# y ->
                              case {__pkg_ccall base-4.8.1.0 rintFloat GHC.Prim.Float#
                                                                       -> GHC.Prim.State#
                                                                            GHC.Prim.RealWorld
                                                                       -> (# GHC.Prim.State#
                                                                               GHC.Prim.RealWorld,
                                                                             GHC.Prim.Float# #)}
                                     (GHC.Prim.timesFloat#
                                        (GHC.Prim.int2Float# (GHC.Prim.-# x y))
                                        __float 0.75)
                                     GHC.Prim.realWorld# of wild3 { (#,#) ds2 ds3 ->
                              GHC.Types.I# (GHC.Prim.+# (GHC.Prim.float2Int# ds3) y) } } },
                              case ww2 of wild { GHC.Types.I# x ->
                              case ww8 of wild2 { GHC.Types.I# y ->
                              case GHC.Classes.divInt# (GHC.Prim.+# x y) 2 of ww9 { DEFAULT ->
                              GHC.Types.I# ww9 } } }) } } })
                            (GHC.Types.:
                               @ SOE.Point
                               (case p9 of ww { (,) ww1 ww2 ->
                                case p10 of ww3 { (,) ww4 ww5 ->
                                case p11 of ww6 { (,) ww7 ww8 ->
                                (case ww4 of wild { GHC.Types.I# x ->
                                 case ww1 of wild2 { GHC.Types.I# y ->
                                 case {__pkg_ccall base-4.8.1.0 rintFloat GHC.Prim.Float#
                                                                          -> GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                          -> (# GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld,
                                                                                GHC.Prim.Float# #)}
                                        (GHC.Prim.timesFloat#
                                           (GHC.Prim.int2Float# (GHC.Prim.-# x y))
                                           __float 0.25)
                                        GHC.Prim.realWorld# of wild3 { (#,#) ds2 ds3 ->
                                 GHC.Types.I# (GHC.Prim.+# (GHC.Prim.float2Int# ds3) y) } } },
                                 case ww2 of wild { GHC.Types.I# x ->
                                 case ww8 of wild2 { GHC.Types.I# y ->
                                 case GHC.Classes.divInt# (GHC.Prim.+# x y) 2 of ww9 { DEFAULT ->
                                 GHC.Types.I# ww9 } } }) } } })
                               (GHC.Types.: @ SOE.Point pA (GHC.Types.[] @ SOE.Point)))))
                      ds12 } })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0])))
                   eta) -}
a8e52315b773540001e17e92faa2225a
  drawSquares ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.drawSquares1
                  `cast`
                (<SOE.Window>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
71b246b3d78aed6c1a1ba05af22d0941
  drawSquares1 ::
    SOE.Window
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U)><L,U(U)><L,U(U)><S(S),1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: SOE.Window
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int
                   w4 :: GHC.Types.Int
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { GHC.Types.I# ww1 -> Hw1.$wa w w1 w2 w3 ww1 w5 }) -}
eb02cf5f82409b03d438eb7c14c7e6e0
  drawTri ::
    SOE.Window
    -> SOE.Point
    -> SOE.Point
    -> SOE.Point
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U(U),U(U))><L,U(U(U),A)><L,U(A,U(U))><S(S),1*U(1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.drawTri1
                  `cast`
                (<SOE.Window>_R
                 ->_R <SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R <SOE.Point>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5661b45cf381e755fce2685e64252fab
  drawTri1 ::
    SOE.Window
    -> SOE.Point
    -> SOE.Point
    -> SOE.Point
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(U),A)><L,U(U(U),U(U))><L,U(U(U),A)><L,U(A,U(U))><S(S),1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: SOE.Window
                   w1 :: SOE.Point
                   w2 :: SOE.Point
                   w3 :: SOE.Point
                   w4 :: GHC.Types.Int
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 Hw1.$wa1 w w1 w2 w3 ww1 w5 }) -}
2b675d1b22daea0c9d1948734419d81e
  firstDiff ::
    GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe ([a], [a])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
ea2405db9836a5980be2ae0628a31386
  firstDiff_$sfirstDiff ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Base.Maybe ([GHC.Types.Char], [GHC.Types.Char])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
11bd266df9a161cf8321c2552255c521
  formatPlay :: XMLTypes.SimpleXML -> XMLTypes.SimpleXML
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: XMLTypes.SimpleXML ->
                 case ds of wild {
                   XMLTypes.PCDATA ipv -> Hw1.formatPlay2
                   XMLTypes.Element name xml
                   -> XMLTypes.Element
                        Hw1.formatPlay1
                        (Hw1.transBodyToHTML
                           (GHC.Types.:
                              @ XMLTypes.SimpleXML
                              (XMLTypes.Element name xml)
                              (GHC.Types.[] @ XMLTypes.SimpleXML))
                           Hw1.$fShowInternalTree1) }) -}
9473a919e09222739bc9f6800b4e7f06
  formatPlay1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "html"#) -}
d1150d2316e6630f49c037cdb06c5080
  formatPlay2 :: XMLTypes.SimpleXML
  {- Strictness: b -}
5358b16cebde1d01c4440aafe8cfff6d
  fringe :: Hw1.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
dfcfc385711b819abd3bafb09bf751b3
  hanoi ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S(S),1*U(1*U)><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.hanoi1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
802ed20afdc8e5ed9955c29a57bc24e3
  hanoi1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S(S),1*U(1*U)><L,U><L,U><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GHC.Base.String
                   w2 :: GHC.Base.String
                   w3 :: GHC.Base.String
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { GHC.Types.I# ww1 -> Hw1.$wa2 ww1 w1 w2 w3 w4 }) -}
de0f23734f8820e49aa185c628e2ed6b
  lengthNonRecursive :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: [a] ->
                 case Hw1.lengthNonRecursive1 @ a w 0 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
797bf7afe269b83eb4c5d6a4938fbf0f
  lengthNonRecursive1 :: [a] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
92875ca97ec958c4eefd761448d640df
  mainXML :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.mainXML1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a007757c795b03090e2550f890129491
  mainXML1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.IO.writeFile1
                        Hw1.mainXML13
                        Hw1.mainXML8
                        s of ds1 { (#,#) ipv ipv1 ->
                 Hw1.mainXML3 Hw1.mainXML13 Hw1.mainXML2 ipv }) -}
25bc63366c2fe286610ef2043a51bce7
  mainXML10 :: [XMLTypes.SimpleXML]
  {- Unfolding: (Hw1.transBodyToHTML
                   Hw1.mainXML11
                   Hw1.$fShowInternalTree1) -}
937241e3eaf2fc381dd6a84ec7d693ae
  mainXML11 :: [XMLTypes.SimpleXML]
  {- Unfolding: (GHC.Types.:
                   @ XMLTypes.SimpleXML
                   Hw1.mainXML12
                   (GHC.Types.[] @ XMLTypes.SimpleXML)) -}
7185b53842dcbe34c3f5d4b6671820ac
  mainXML12 :: XMLTypes.SimpleXML
  {- Unfolding: (XMLTypes.Element Play.play12552 Play.play1) -}
b53dbd72e3ec964cbaf84dd5fa304f64
  mainXML13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "dream.html"#) -}
8d0bfbc88df3a9315deb6fcbfc00764d
  mainXML2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sample.html"#) -}
a86893ec4383426fa644f12932f486b5
  mainXML3 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ file1 :: GHC.Base.String
                   file2 :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        file1
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openFile1
                        file2
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Hw1.firstDiff_$sfirstDiff ipv3 ipv7 of wild {
                   GHC.Base.Nothing
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw1.mainXML7
                        GHC.Types.False
                        ipv6
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) cs ds5 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hw1.mainXML6
                             GHC.Types.False
                             ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 20 cs)
                             GHC.Types.False
                             ipv8 of ds7 { (#,#) ipv10 ipv11 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hw1.mainXML5
                             GHC.Types.False
                             ipv10 of ds8 { (#,#) ipv12 ipv13 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 20 ds5)
                             GHC.Types.False
                             ipv12 of ds9 { (#,#) ipv14 ipv15 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw1.mainXML4
                        GHC.Types.False
                        ipv14 } } } } } } } } } }) -}
ba5dfefd556bcfc3580478c5452a77b8
  mainXML4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "'\n"#) -}
a32b97c1c974c62aa6b725fb77cc4b93
  mainXML5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "' vs '"#) -}
e07b5e38b47180ab6e5934f230cabc0a
  mainXML6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Results differ: '"#) -}
339bf90a92d287f99ef816bc51d2beda
  mainXML7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success!\n"#) -}
12d0ff56832d8e4da94e1f3c8220017d
  mainXML8 :: GHC.Base.String
  {- Unfolding: (XMLTypes.xml2string Hw1.mainXML9) -}
b2b2b42ea2c94fa94e1161e1b7c196c7
  mainXML9 :: XMLTypes.SimpleXML
  {- Unfolding: (XMLTypes.Element Hw1.formatPlay1 Hw1.mainXML10) -}
f9414d65f0632cb9148adfcb6816245f
  maxList :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
c263940e144af127f79da9a6772b1621
  maxListNonRecursive :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Types.Int] ->
                 case w of wild {
                   [] -> Hw1.maxListNonRecursive1
                   : x xs
                   -> case x of ww { GHC.Types.I# ww1 ->
                      case Hw1.$wgo xs ww1 of ww2 { DEFAULT -> GHC.Types.I# ww2 } } }) -}
ed9c90dded65075a663057bc527c3ca2
  maxListNonRecursive1 :: GHC.Types.Int
  {- Strictness: b -}
0e9ff3f68e6f3d1a4f60cd1f4969dfaa
  minList :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U> -}
84351a68c4f25148dc6207553e7f72a1
  minListNonRecursive :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Types.Int] ->
                 case w of wild {
                   [] -> Hw1.minListNonRecursive1
                   : x xs
                   -> case x of ww { GHC.Types.I# ww1 ->
                      case Hw1.$wgo1 xs ww1 of ww2 { DEFAULT ->
                      GHC.Types.I# ww2 } } }) -}
308e858c91ae6bbf0714ec77ab308ff5
  minListNonRecursive1 :: GHC.Types.Int
  {- Strictness: b -}
97f36126e2dc93403c61aaf9a14f54c6
  myEmail :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "z3lian@eng.ucsd.edu"#) -}
3d6ff04181cf710ab0c59cdaae44b68f
  myFractal :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.myFractal1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1f3590568c19d31b05cd5b5ffc750505
  myFractal1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.$wa6
                        Hw1.myFractal9
                        Hw1.myFractal7
                        s of ds1 { (#,#) ipv ipv1 ->
                 case SOE.drawInWindow1
                        ipv1
                        Hw1.myFractal2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.NTCo:IO[0] <()>_R)) (Sym (SOE.NTCo:Graphic[0])))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Hw1.$wa1
                        ipv1
                        Hw1.p1
                        Hw1.p2
                        Hw1.p3
                        6
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 Hw1.closeFigure1 ipv1 ipv4 } } }) -}
e7f0461caef6f59de08188533c26dffa
  myFractal2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Graphics.Rendering.OpenGL.Raw.Functions.ptr_glColor3f
                        `cast`
                      (GHC.Ptr.FunPtr
                         (UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P UnivCo opt_phantom phantom Foreign.C.Types.CFloat GHC.Types.Float
                          ->_P <GHC.Types.IO ()>_P))_R of ds4 { GHC.Ptr.FunPtr ds5 ->
                 case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.Float#
                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds5
                        __float 1.0
                        __float 1.0
                        __float 1.0
                        s of wild1 { (##) ds12 ->
                 SOE.polygon1 Hw1.myFractal3 ds12 } }) -}
a32122c6073f37f80dd594b72b3853b7
  myFractal3 :: [SOE.Point]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ SOE.Point Hw1.p1 Hw1.myFractal4) -}
4ed360efd56d0e2b55f75b52cddadd03
  myFractal4 :: [SOE.Point]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ SOE.Point Hw1.p2 Hw1.myFractal5) -}
9541373cb45069d5119d20cf74b5e1c4
  myFractal5 :: [SOE.Point]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ SOE.Point Hw1.p3 Hw1.myFractal6) -}
63dc796ed6ed35ac5e778edcfb952ed0
  myFractal6 :: [SOE.Point]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ SOE.Point
                   Hw1.p1
                   (GHC.Types.[] @ SOE.Point)) -}
9a899d82b6c4a4d58f0cbca63cb0b991
  myFractal7 :: GHC.Base.Maybe SOE.Size
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ SOE.Size Hw1.myFractal8) -}
1b3a6c61e65edc536885f615df0ec752
  myFractal8 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Hw1.xWin, Hw1.xWin)) -}
bbbdb785f78041111593c35267228062
  myFractal9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Drawing sierpinski triangle"#) -}
004bc94e2c4ad0cb629ad4b2e42183fb
  myMap :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a @ b f :: a -> b xs :: [a] ->
                 letrec {
                   go :: [a] -> [b] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [a] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ b : y ys -> GHC.Types.: @ b (f y) (go ys) }
                 } in
                 go xs) -}
add7ffbd05f7ae573f9c1eba9ce0404e
  myName :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Zhen(Alex) Lian"#) -}
74790432dc0e10591e8510be4d7e746b
  mySID :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A53215552"#) -}
95ecd3f470afeb9c6e73753c8a6a7e9a
  p1 :: SOE.Point
  {- HasNoCafRefs, Strictness: m, Unfolding: ((Hw1.p8, Hw1.p6)) -}
e824393eeaaeffd87e2ebc9d36ff81a0
  p2 :: SOE.Point
  {- HasNoCafRefs, Strictness: m, Unfolding: ((Hw1.p7, Hw1.p6)) -}
6825b671fe19559ecbbbb5ecf12a5d29
  p3 :: SOE.Point
  {- HasNoCafRefs, Strictness: m, Unfolding: ((Hw1.p5, Hw1.p4)) -}
51a4edd40c248e458eda94e489103ccb
  p4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 94) -}
e4607ee26dd464fb6e73182bba17b949
  p5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 370) -}
f9a1f0a8909928f5a6e187d6483ab3ab
  p6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 700) -}
fca92a197761e95fd9866697c0d927b3
  p7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 720) -}
b6a825eb638b84009ce539747b8214b7
  p8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20) -}
1c697d95738414154e8490a53d3e834a
  pairAndOne :: [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9f49b0c275f8934f3f84b52c5c77397a
  pairAndOneNonRecursive ::
    [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ xs :: [GHC.Types.Int] ->
                 Hw1.pairAndOneNonRecursive_go xs) -}
b39a6044bd6022f50a11e46bafdaf06e
  pairAndOneNonRecursive_go ::
    [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
dc04e0b64a8640bba9156fca4e94c447
  randomColor :: SOE.Color
  {- Unfolding: (GHC.List.$w!! @ SOE.Color Hw1.randomColor1 2) -}
079a37a174464086001a5a765bddd57d
  randomColor1 :: [SOE.Color]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ SOE.Color SOE.Blue Hw1.randomColor2) -}
7368ea264221b36c3c8410d0cdd8e795
  randomColor2 :: [SOE.Color]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.: @ SOE.Color SOE.White Hw1.randomColor3) -}
6b2c6cc53b854f996b88bafa8f8748c3
  randomColor3 :: [SOE.Color]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ SOE.Color
                   SOE.Magenta
                   (GHC.Types.[] @ SOE.Color)) -}
996798327d7c031efaedcd4832d49eec
  rectangle :: Hw1.Side -> Hw1.Side -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (0, True, True) Hw1.Rectangle -}
c3115d9147de63f9e7641518ae3ce02a
  rtTriangle :: Hw1.Side -> Hw1.Side -> Hw1.Shape
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Hw1.RtTriangle -}
75112c433079e829e390737f2c480b8f
  shapeToVertex :: Hw1.Shape -> [Hw1.Vertex]
  {- Arity: 1, Strictness: <S,1*U> -}
da53d387990f1e921641ae2495bdc1ff
  sides :: Hw1.Shape -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Hw1.Shape ->
                 case Hw1.$wsides w of ww { DEFAULT -> GHC.Types.I# ww }) -}
3958c0f14ee0130a1230c1927f537b22
  sierpinskiCarpet :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.sierpinskiCarpet1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5734d24063f6e99f60c4143284c32dbc
  sierpinskiCarpet1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case SOE.$wa6
                        Hw1.sierpinskiCarpet3
                        Hw1.myFractal7
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Hw1.$wa
                        ipv1
                        Hw1.p8
                        Hw1.p8
                        Hw1.sierpinskiCarpet2
                        33
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Hw1.closeFigure1 ipv1 ipv2 } }) -}
cfdf0ecfea30d93816b08b0301579b0d
  sierpinskiCarpet2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 600) -}
e065fe8170c3ec7f0e9c5db4dea00bb7
  sierpinskiCarpet3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Drawing Sierpinski Carpet"#) -}
9114e049d9decf2997ec9e8718829d4e
  takeTree ::
    GHC.Types.Int -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, Strictness: <L,1*U(1*U)><S,1*U> -}
8043b7f6d7dbb69d9a113d0f95a60423
  takeTreeWhile ::
    (a -> GHC.Types.Bool) -> Hw1.InternalTree a -> Hw1.InternalTree a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
454dd4fa5ad859a24d5052a7194bfde6
  testResults ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw1.mainXML3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
40ef4b32534bac4c26b364da00ea3787
  transBodyToHTML ::
    [XMLTypes.SimpleXML] -> GHC.Types.Int -> [XMLTypes.SimpleXML]
  {- Arity: 2, Strictness: <S,1*U><L,U(U)> -}
fb476ef0dee4300fcb7694f86b54190b
  treeHeight :: Hw1.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: Hw1.Tree a ->
                 case Hw1.$wtreeHeight @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
a5a406f3c6d50ce1421776e54d802e3e
  treeSize :: Hw1.Tree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a w :: Hw1.Tree a ->
                 case Hw1.$wtreeSize @ a w of ww { DEFAULT -> GHC.Types.I# ww }) -}
459226aed8bf221cd323bbde1d702958
  xWin :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 800) -}
127cae9c6f3e917bf62e866d13ad8313
  yWin :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Hw1.xWin) -}
instance GHC.Classes.Eq [Hw1.InternalTree] = Hw1.$fEqInternalTree
instance GHC.Classes.Eq [Hw1.Tree] = Hw1.$fEqTree
instance GHC.Show.Show [Hw1.InternalTree] = Hw1.$fShowInternalTree
instance GHC.Show.Show [Hw1.Shape] = Hw1.$fShowShape
instance GHC.Show.Show [Hw1.Tree] = Hw1.$fShowTree
"SPEC firstDiff @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                  GHC.Types.Char
  Hw1.firstDiff @ GHC.Types.Char $dEq = Hw1.firstDiff_$sfirstDiff
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

